
MotorMovements.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  00001428  000014bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001428  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  00800162  00800162  0000151e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000151e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000157c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000015bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000de7  00000000  00000000  00001684  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ada  00000000  00000000  0000246b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000084e  00000000  00000000  00002f45  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d8  00000000  00000000  00003794  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000573  00000000  00000000  00003a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000806  00000000  00000000  00003fdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000047e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	39 c0       	rjmp	.+114    	; 0x74 <__ctors_end>
       2:	00 00       	nop
       4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
       6:	00 00       	nop
       8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
       a:	00 00       	nop
       c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
       e:	00 00       	nop
      10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
      12:	00 00       	nop
      14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
      16:	00 00       	nop
      18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
      1a:	00 00       	nop
      1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
      1e:	00 00       	nop
      20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
      22:	00 00       	nop
      24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
      26:	00 00       	nop
      28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
      2a:	00 00       	nop
      2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
      2e:	00 00       	nop
      30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
      32:	00 00       	nop
      34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
      36:	00 00       	nop
      38:	54 c1       	rjmp	.+680    	; 0x2e2 <__vector_14>
      3a:	00 00       	nop
      3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
      3e:	00 00       	nop
      40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
      42:	00 00       	nop
      44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
      46:	00 00       	nop
      48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
      4a:	00 00       	nop
      4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
      4e:	00 00       	nop
      50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
      52:	00 00       	nop
      54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
      56:	00 00       	nop
      58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
      5a:	00 00       	nop
      5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
      5e:	00 00       	nop
      60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
      62:	00 00       	nop
      64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
	...

00000068 <__trampolines_end>:
      68:	63 64       	ori	r22, 0x43	; 67
      6a:	69 6e       	ori	r22, 0xE9	; 233
      6c:	6f 70       	andi	r22, 0x0F	; 15
      6e:	73 75       	andi	r23, 0x53	; 83
      70:	78 58       	subi	r23, 0x88	; 136
      72:	5b 00       	.word	0x005b	; ????

00000074 <__ctors_end>:
      74:	11 24       	eor	r1, r1
      76:	1f be       	out	0x3f, r1	; 63
      78:	cf ef       	ldi	r28, 0xFF	; 255
      7a:	d8 e0       	ldi	r29, 0x08	; 8
      7c:	de bf       	out	0x3e, r29	; 62
      7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
      80:	11 e0       	ldi	r17, 0x01	; 1
      82:	a0 e0       	ldi	r26, 0x00	; 0
      84:	b1 e0       	ldi	r27, 0x01	; 1
      86:	e8 e2       	ldi	r30, 0x28	; 40
      88:	f4 e1       	ldi	r31, 0x14	; 20
      8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
      8c:	05 90       	lpm	r0, Z+
      8e:	0d 92       	st	X+, r0
      90:	a2 36       	cpi	r26, 0x62	; 98
      92:	b1 07       	cpc	r27, r17
      94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
      96:	21 e0       	ldi	r18, 0x01	; 1
      98:	a2 e6       	ldi	r26, 0x62	; 98
      9a:	b1 e0       	ldi	r27, 0x01	; 1
      9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
      9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
      a0:	a3 38       	cpi	r26, 0x83	; 131
      a2:	b2 07       	cpc	r27, r18
      a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
      a6:	1d d0       	rcall	.+58     	; 0xe2 <main>
      a8:	0c 94 12 0a 	jmp	0x1424	; 0x1424 <_exit>

000000ac <__bad_interrupt>:
      ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <clear_buffer>:
#include <string.h>

char tbuffer[25];

void clear_buffer(char *tbuffer)
{
      ae:	fc 01       	movw	r30, r24
      b0:	49 96       	adiw	r24, 0x19	; 25
	for (unsigned char i=0; i < 25; i++)
	{
		tbuffer[i] = '\0';
      b2:	11 92       	st	Z+, r1

char tbuffer[25];

void clear_buffer(char *tbuffer)
{
	for (unsigned char i=0; i < 25; i++)
      b4:	e8 17       	cp	r30, r24
      b6:	f9 07       	cpc	r31, r25
      b8:	e1 f7       	brne	.-8      	; 0xb2 <clear_buffer+0x4>
	{
		tbuffer[i] = '\0';
	}
}
      ba:	08 95       	ret

000000bc <move_motors_to_target>:

unsigned char tDegrees[5] = {SERVO_BASE_START, SERVO_SHOULDER_START, SERVO_ELBOW_START, SERVO_WRIST_START, 0};

void move_motors_to_target()
{
	while(!servo_allMotorsAtTarget(tDegrees))
      bc:	0c c0       	rjmp	.+24     	; 0xd6 <move_motors_to_target+0x1a>
	{
		servo_moveOneStepToTarget(tDegrees);
      be:	80 e0       	ldi	r24, 0x00	; 0
      c0:	91 e0       	ldi	r25, 0x01	; 1
      c2:	46 d2       	rcall	.+1164   	; 0x550 <servo_moveOneStepToTarget>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      c4:	2f ef       	ldi	r18, 0xFF	; 255
      c6:	89 ef       	ldi	r24, 0xF9	; 249
      c8:	90 e0       	ldi	r25, 0x00	; 0
      ca:	21 50       	subi	r18, 0x01	; 1
      cc:	80 40       	sbci	r24, 0x00	; 0
      ce:	90 40       	sbci	r25, 0x00	; 0
      d0:	e1 f7       	brne	.-8      	; 0xca <move_motors_to_target+0xe>
      d2:	00 c0       	rjmp	.+0      	; 0xd4 <move_motors_to_target+0x18>
      d4:	00 00       	nop

unsigned char tDegrees[5] = {SERVO_BASE_START, SERVO_SHOULDER_START, SERVO_ELBOW_START, SERVO_WRIST_START, 0};

void move_motors_to_target()
{
	while(!servo_allMotorsAtTarget(tDegrees))
      d6:	80 e0       	ldi	r24, 0x00	; 0
      d8:	91 e0       	ldi	r25, 0x01	; 1
      da:	9f d1       	rcall	.+830    	; 0x41a <servo_allMotorsAtTarget>
      dc:	88 23       	and	r24, r24
      de:	79 f3       	breq	.-34     	; 0xbe <move_motors_to_target+0x2>
	{
		servo_moveOneStepToTarget(tDegrees);
		_delay_ms(DELAY_TIME);
	}
}
      e0:	08 95       	ret

000000e2 <main>:

int main(void)
{
	uart_init();
      e2:	07 d3       	rcall	.+1550   	; 0x6f2 <uart_init>
	servo_init();
      e4:	f6 d0       	rcall	.+492    	; 0x2d2 <servo_init>
      e6:	2f ef       	ldi	r18, 0xFF	; 255
      e8:	81 ee       	ldi	r24, 0xE1	; 225
      ea:	94 e0       	ldi	r25, 0x04	; 4
      ec:	21 50       	subi	r18, 0x01	; 1
      ee:	80 40       	sbci	r24, 0x00	; 0
      f0:	90 40       	sbci	r25, 0x00	; 0
      f2:	e1 f7       	brne	.-8      	; 0xec <main+0xa>
      f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x14>
      f6:	00 00       	nop
	_delay_ms(100);
	
	sei();
      f8:	78 94       	sei
	
	servo_moveToStartPosition();
      fa:	98 d2       	rcall	.+1328   	; 0x62c <servo_moveToStartPosition>
      fc:	0f 2e       	mov	r0, r31
	unsigned char continueFlag = 0;	

	while(1)
    {
		clear_buffer(tbuffer);
      fe:	f4 e6       	ldi	r31, 0x64	; 100
     100:	ef 2e       	mov	r14, r31
     102:	f1 e0       	ldi	r31, 0x01	; 1
     104:	ff 2e       	mov	r15, r31
     106:	f0 2d       	mov	r31, r0
     108:	c7 e1       	ldi	r28, 0x17	; 23
		continueFlag = 0;
		
		for (unsigned char i = 0;i < 18; i++)
		{
			if(scanf("%c", &tbuffer[i]) != 1)
     10a:	d1 e0       	ldi	r29, 0x01	; 1
     10c:	0f 2e       	mov	r0, r31
			//printf("\n\rError in Bracket Position\n\r");
			continue;
		}
			
		//Read Values and save them in Array
		sscanf(tbuffer,"%*c%3u%*c%3u%*c%3u%*c%3u%*c%*c",&tDegrees[0], &tDegrees[1], &tDegrees[2], &tDegrees[3]);
     10e:	f0 e0       	ldi	r31, 0x00	; 0
     110:	cf 2e       	mov	r12, r31
     112:	f1 e0       	ldi	r31, 0x01	; 1
     114:	df 2e       	mov	r13, r31
     116:	f0 2d       	mov	r31, r0
     118:	0f 2e       	mov	r0, r31
     11a:	f2 e4       	ldi	r31, 0x42	; 66
     11c:	2f 2e       	mov	r2, r31
     11e:	f1 e0       	ldi	r31, 0x01	; 1
     120:	3f 2e       	mov	r3, r31
     122:	f0 2d       	mov	r31, r0
     124:	0f 2e       	mov	r0, r31
					break;
				}
				//Get Position (Print position)
				else if(tbuffer[0] == 'G')
				{
					printf("[%3u;%3u;%3u;%3u;]\n\r", servo_get(0), servo_get(1), servo_get(2), servo_get(3));
     126:	fd e2       	ldi	r31, 0x2D	; 45
     128:	4f 2e       	mov	r4, r31
     12a:	f1 e0       	ldi	r31, 0x01	; 1
     12c:	5f 2e       	mov	r5, r31
     12e:	f0 2d       	mov	r31, r0
     130:	0f 2e       	mov	r0, r31
			if(i == 0)
			{
				//Reset Position
				if(tbuffer[0] == 'R')
				{
					printf("esetting motors.\n\r");
     132:	fa e1       	ldi	r31, 0x1A	; 26
     134:	6f 2e       	mov	r6, r31
     136:	f1 e0       	ldi	r31, 0x01	; 1
     138:	7f 2e       	mov	r7, r31
     13a:	f0 2d       	mov	r31, r0
	servo_moveToStartPosition();
	unsigned char continueFlag = 0;	

	while(1)
    {
		clear_buffer(tbuffer);
     13c:	c7 01       	movw	r24, r14
     13e:	b7 df       	rcall	.-146    	; 0xae <clear_buffer>
     140:	0f 2e       	mov	r0, r31
     142:	f4 e6       	ldi	r31, 0x64	; 100
     144:	af 2e       	mov	r10, r31
     146:	f1 e0       	ldi	r31, 0x01	; 1
     148:	bf 2e       	mov	r11, r31
     14a:	f0 2d       	mov	r31, r0
     14c:	91 2c       	mov	r9, r1
		continueFlag = 0;
		
		for (unsigned char i = 0;i < 18; i++)
     14e:	bf 92       	push	r11
		{
			if(scanf("%c", &tbuffer[i]) != 1)
     150:	af 92       	push	r10
     152:	df 93       	push	r29
     154:	cf 93       	push	r28
     156:	c7 d3       	rcall	.+1934   	; 0x8e6 <scanf>
     158:	0f 90       	pop	r0
     15a:	0f 90       	pop	r0
     15c:	0f 90       	pop	r0
     15e:	0f 90       	pop	r0
     160:	01 97       	sbiw	r24, 0x01	; 1
     162:	11 f0       	breq	.+4      	; 0x168 <main+0x86>
			{
				uart_error();
     164:	df d2       	rcall	.+1470   	; 0x724 <uart_error>
     166:	ea cf       	rjmp	.-44     	; 0x13c <main+0x5a>
				//printf("\n\rError reading letter\n\r");
				
				continueFlag = 1;
				break;
     168:	91 10       	cpse	r9, r1
			}
			
			if(i == 0)
     16a:	33 c0       	rjmp	.+102    	; 0x1d2 <main+0xf0>
     16c:	f7 01       	movw	r30, r14
			{
				//Reset Position
				if(tbuffer[0] == 'R')
     16e:	80 81       	ld	r24, Z
     170:	82 35       	cpi	r24, 0x52	; 82
				{
					printf("esetting motors.\n\r");
     172:	39 f4       	brne	.+14     	; 0x182 <main+0xa0>
     174:	7f 92       	push	r7
     176:	6f 92       	push	r6
     178:	a3 d3       	rcall	.+1862   	; 0x8c0 <printf>
					servo_moveToStartPosition();
     17a:	58 d2       	rcall	.+1200   	; 0x62c <servo_moveToStartPosition>
					//printf("Reached destination.\n\r");
					//printf("[%3u][%3u][%3u][%3u]\n\r", servo_get_base(), servo_get_shoulder(), servo_get_elbow(), servo_get_wrist());
					
					continueFlag = 1;
					break;
     17c:	0f 90       	pop	r0
     17e:	0f 90       	pop	r0
				}
				//Get Position (Print position)
				else if(tbuffer[0] == 'G')
     180:	dd cf       	rjmp	.-70     	; 0x13c <main+0x5a>
     182:	87 34       	cpi	r24, 0x47	; 71
				{
					printf("[%3u;%3u;%3u;%3u;]\n\r", servo_get(0), servo_get(1), servo_get(2), servo_get(3));
     184:	11 f5       	brne	.+68     	; 0x1ca <main+0xe8>
     186:	83 e0       	ldi	r24, 0x03	; 3
     188:	1f d1       	rcall	.+574    	; 0x3c8 <servo_get>
     18a:	98 2e       	mov	r9, r24
     18c:	89 2e       	mov	r8, r25
     18e:	82 e0       	ldi	r24, 0x02	; 2
     190:	1b d1       	rcall	.+566    	; 0x3c8 <servo_get>
     192:	b8 2e       	mov	r11, r24
     194:	a9 2e       	mov	r10, r25
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	17 d1       	rcall	.+558    	; 0x3c8 <servo_get>
     19a:	18 2f       	mov	r17, r24
     19c:	09 2f       	mov	r16, r25
     19e:	80 e0       	ldi	r24, 0x00	; 0
     1a0:	13 d1       	rcall	.+550    	; 0x3c8 <servo_get>
     1a2:	8f 92       	push	r8
     1a4:	9f 92       	push	r9
     1a6:	af 92       	push	r10
     1a8:	bf 92       	push	r11
     1aa:	0f 93       	push	r16
     1ac:	1f 93       	push	r17
     1ae:	9f 93       	push	r25
     1b0:	8f 93       	push	r24
     1b2:	5f 92       	push	r5
     1b4:	4f 92       	push	r4
     1b6:	84 d3       	rcall	.+1800   	; 0x8c0 <printf>
     1b8:	8d b7       	in	r24, 0x3d	; 61
					
					continueFlag = 1;
					break;
     1ba:	9e b7       	in	r25, 0x3e	; 62
     1bc:	0a 96       	adiw	r24, 0x0a	; 10
     1be:	0f b6       	in	r0, 0x3f	; 63
     1c0:	f8 94       	cli
     1c2:	9e bf       	out	0x3e, r25	; 62
     1c4:	0f be       	out	0x3f, r0	; 63
     1c6:	8d bf       	out	0x3d, r24	; 61
     1c8:	b9 cf       	rjmp	.-142    	; 0x13c <main+0x5a>
     1ca:	8b 35       	cpi	r24, 0x5B	; 91
				}
				//Error
				else if(tbuffer[0] != '[')
     1cc:	09 f4       	brne	.+2      	; 0x1d0 <main+0xee>
     1ce:	6a c0       	rjmp	.+212    	; 0x2a4 <main+0x1c2>
     1d0:	b5 cf       	rjmp	.-150    	; 0x13c <main+0x5a>
     1d2:	f5 01       	movw	r30, r10
					break;
				}
			}
			
			//Invalid number or char
			if(tbuffer[i] != '[' && tbuffer[i] != ']' && tbuffer[i] != ';' && (tbuffer[i] < 48 || tbuffer[i] > 57))
     1d4:	80 81       	ld	r24, Z
     1d6:	ff ef       	ldi	r31, 0xFF	; 255
     1d8:	af 1a       	sub	r10, r31
     1da:	bf 0a       	sbc	r11, r31
     1dc:	8b 35       	cpi	r24, 0x5B	; 91
     1de:	41 f0       	breq	.+16     	; 0x1f0 <main+0x10e>
     1e0:	8d 35       	cpi	r24, 0x5D	; 93
     1e2:	31 f0       	breq	.+12     	; 0x1f0 <main+0x10e>
     1e4:	8b 33       	cpi	r24, 0x3B	; 59
     1e6:	21 f0       	breq	.+8      	; 0x1f0 <main+0x10e>
     1e8:	80 53       	subi	r24, 0x30	; 48
     1ea:	8a 30       	cpi	r24, 0x0A	; 10
     1ec:	08 f0       	brcs	.+2      	; 0x1f0 <main+0x10e>
     1ee:	a6 cf       	rjmp	.-180    	; 0x13c <main+0x5a>
     1f0:	93 94       	inc	r9
	while(1)
    {
		clear_buffer(tbuffer);
		continueFlag = 0;
		
		for (unsigned char i = 0;i < 18; i++)
     1f2:	22 e1       	ldi	r18, 0x12	; 18
     1f4:	92 12       	cpse	r9, r18
     1f6:	ab cf       	rjmp	.-170    	; 0x14e <main+0x6c>
     1f8:	4a c0       	rjmp	.+148    	; 0x28e <main+0x1ac>
     1fa:	f7 01       	movw	r30, r14
			//printf("\n\rError in Buffer Length\n\r");
			continue;
		}
			
		//Test Brackets Positioning
		if(tbuffer[0] != '[' || tbuffer[4] != ';' || tbuffer[8] != ';' || tbuffer[12] != ';' || tbuffer[16] != ';'|| tbuffer[17] != ']')
     1fc:	80 81       	ld	r24, Z
     1fe:	8b 35       	cpi	r24, 0x5B	; 91
     200:	09 f0       	breq	.+2      	; 0x204 <main+0x122>
     202:	9c cf       	rjmp	.-200    	; 0x13c <main+0x5a>
     204:	84 81       	ldd	r24, Z+4	; 0x04
     206:	8b 33       	cpi	r24, 0x3B	; 59
     208:	09 f0       	breq	.+2      	; 0x20c <main+0x12a>
     20a:	98 cf       	rjmp	.-208    	; 0x13c <main+0x5a>
     20c:	80 85       	ldd	r24, Z+8	; 0x08
     20e:	8b 33       	cpi	r24, 0x3B	; 59
     210:	09 f0       	breq	.+2      	; 0x214 <main+0x132>
     212:	94 cf       	rjmp	.-216    	; 0x13c <main+0x5a>
     214:	84 85       	ldd	r24, Z+12	; 0x0c
     216:	8b 33       	cpi	r24, 0x3B	; 59
     218:	09 f0       	breq	.+2      	; 0x21c <main+0x13a>
     21a:	90 cf       	rjmp	.-224    	; 0x13c <main+0x5a>
     21c:	80 89       	ldd	r24, Z+16	; 0x10
     21e:	8b 33       	cpi	r24, 0x3B	; 59
     220:	09 f0       	breq	.+2      	; 0x224 <main+0x142>
     222:	8c cf       	rjmp	.-232    	; 0x13c <main+0x5a>
     224:	81 89       	ldd	r24, Z+17	; 0x11
     226:	8d 35       	cpi	r24, 0x5D	; 93
     228:	09 f0       	breq	.+2      	; 0x22c <main+0x14a>
     22a:	88 cf       	rjmp	.-240    	; 0x13c <main+0x5a>
     22c:	83 e0       	ldi	r24, 0x03	; 3
			//printf("\n\rError in Bracket Position\n\r");
			continue;
		}
			
		//Read Values and save them in Array
		sscanf(tbuffer,"%*c%3u%*c%3u%*c%3u%*c%3u%*c%*c",&tDegrees[0], &tDegrees[1], &tDegrees[2], &tDegrees[3]);
     22e:	91 e0       	ldi	r25, 0x01	; 1
     230:	9f 93       	push	r25
     232:	8f 93       	push	r24
     234:	82 e0       	ldi	r24, 0x02	; 2
     236:	91 e0       	ldi	r25, 0x01	; 1
     238:	9f 93       	push	r25
     23a:	8f 93       	push	r24
     23c:	81 e0       	ldi	r24, 0x01	; 1
     23e:	91 e0       	ldi	r25, 0x01	; 1
     240:	9f 93       	push	r25
     242:	8f 93       	push	r24
     244:	df 92       	push	r13
     246:	cf 92       	push	r12
     248:	3f 92       	push	r3
     24a:	2f 92       	push	r2
     24c:	ff 92       	push	r15
     24e:	ef 92       	push	r14
     250:	5d d3       	rcall	.+1722   	; 0x90c <sscanf>
     252:	8d b7       	in	r24, 0x3d	; 61
		
		if((tDegrees[0] < SERVO_BASE_MIN || tDegrees[0] > SERVO_BASE_MAX) || (tDegrees[1] < SERVO_SHOULDER_MIN || tDegrees[1] > SERVO_SHOULDER_MAX) 
     254:	9e b7       	in	r25, 0x3e	; 62
     256:	0c 96       	adiw	r24, 0x0c	; 12
     258:	0f b6       	in	r0, 0x3f	; 63
     25a:	f8 94       	cli
     25c:	9e bf       	out	0x3e, r25	; 62
     25e:	0f be       	out	0x3f, r0	; 63
     260:	8d bf       	out	0x3d, r24	; 61
     262:	f6 01       	movw	r30, r12
     264:	80 81       	ld	r24, Z
     266:	85 3b       	cpi	r24, 0xB5	; 181
     268:	08 f0       	brcs	.+2      	; 0x26c <main+0x18a>
     26a:	68 cf       	rjmp	.-304    	; 0x13c <main+0x5a>
     26c:	81 81       	ldd	r24, Z+1	; 0x01
     26e:	8d 52       	subi	r24, 0x2D	; 45
     270:	84 37       	cpi	r24, 0x74	; 116
     272:	08 f0       	brcs	.+2      	; 0x276 <main+0x194>
     274:	63 cf       	rjmp	.-314    	; 0x13c <main+0x5a>
		|| (tDegrees[2] < SERVO_ELBOW_MIN || tDegrees[2] > SERVO_ELBOW_MAX) || (tDegrees[3] < SERVO_WRIST_MIN || tDegrees[3] > SERVO_WRIST_MAX))
     276:	82 81       	ldd	r24, Z+2	; 0x02
     278:	8d 52       	subi	r24, 0x2D	; 45
     27a:	84 37       	cpi	r24, 0x74	; 116
     27c:	08 f0       	brcs	.+2      	; 0x280 <main+0x19e>
     27e:	5e cf       	rjmp	.-324    	; 0x13c <main+0x5a>
     280:	83 81       	ldd	r24, Z+3	; 0x03
     282:	8d 52       	subi	r24, 0x2D	; 45
     284:	88 38       	cpi	r24, 0x88	; 136
     286:	08 f0       	brcs	.+2      	; 0x28a <main+0x1a8>
     288:	59 cf       	rjmp	.-334    	; 0x13c <main+0x5a>
		{
			//printf("\n\rError in Limits\n\r");
			continue;
		}
		
		move_motors_to_target();
     28a:	18 df       	rcall	.-464    	; 0xbc <move_motors_to_target>
     28c:	57 cf       	rjmp	.-338    	; 0x13c <main+0x5a>
     28e:	f7 01       	movw	r30, r14
		
		if(continueFlag)
			continue;
		
		//Check length data
		if(strlen(tbuffer) != 18)
     290:	01 90       	ld	r0, Z+
     292:	00 20       	and	r0, r0
     294:	e9 f7       	brne	.-6      	; 0x290 <main+0x1ae>
     296:	e7 57       	subi	r30, 0x77	; 119
     298:	f1 40       	sbci	r31, 0x01	; 1
     29a:	09 f0       	breq	.+2      	; 0x29e <main+0x1bc>
     29c:	4f cf       	rjmp	.-354    	; 0x13c <main+0x5a>
     29e:	ad cf       	rjmp	.-166    	; 0x1fa <main+0x118>
     2a0:	93 94       	inc	r9
	while(1)
    {
		clear_buffer(tbuffer);
		continueFlag = 0;
		
		for (unsigned char i = 0;i < 18; i++)
     2a2:	55 cf       	rjmp	.-342    	; 0x14e <main+0x6c>
     2a4:	f5 01       	movw	r30, r10
					break;
				}
			}
			
			//Invalid number or char
			if(tbuffer[i] != '[' && tbuffer[i] != ']' && tbuffer[i] != ';' && (tbuffer[i] < 48 || tbuffer[i] > 57))
     2a6:	80 81       	ld	r24, Z
     2a8:	ff ef       	ldi	r31, 0xFF	; 255
     2aa:	af 1a       	sub	r10, r31
     2ac:	bf 0a       	sbc	r11, r31
     2ae:	8b 35       	cpi	r24, 0x5B	; 91
     2b0:	09 f0       	breq	.+2      	; 0x2b4 <main+0x1d2>
     2b2:	96 cf       	rjmp	.-212    	; 0x1e0 <main+0xfe>
     2b4:	f5 cf       	rjmp	.-22     	; 0x2a0 <main+0x1be>

000002b6 <timer0_init>:
     2b6:	84 b5       	in	r24, 0x24	; 36
}

int convert_motorsteps_to_degrees(int motorsteps)
{
	return (motorsteps * 9UL) / 10UL;
}
     2b8:	82 60       	ori	r24, 0x02	; 2
     2ba:	84 bd       	out	0x24, r24	; 36
     2bc:	85 b5       	in	r24, 0x25	; 37
     2be:	82 60       	ori	r24, 0x02	; 2
     2c0:	85 bd       	out	0x25, r24	; 37
     2c2:	83 e1       	ldi	r24, 0x13	; 19
     2c4:	87 bd       	out	0x27, r24	; 39
     2c6:	ee e6       	ldi	r30, 0x6E	; 110
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	80 81       	ld	r24, Z
     2cc:	82 60       	ori	r24, 0x02	; 2
     2ce:	80 83       	st	Z, r24
     2d0:	08 95       	ret

000002d2 <servo_init>:
     2d2:	23 9a       	sbi	0x04, 3	; 4
     2d4:	22 9a       	sbi	0x04, 2	; 4
     2d6:	21 9a       	sbi	0x04, 1	; 4
     2d8:	56 9a       	sbi	0x0a, 6	; 10
     2da:	55 9a       	sbi	0x0a, 5	; 10
     2dc:	ec df       	rcall	.-40     	; 0x2b6 <timer0_init>
     2de:	78 94       	sei
     2e0:	08 95       	ret

000002e2 <__vector_14>:

static volatile unsigned int pwm_cycle = 0;
static volatile unsigned char motor_vals[] = { ((SERVO_BASE_START * 10UL) / 9UL), ((SERVO_SHOULDER_START * 10UL) / 9UL), ((SERVO_ELBOW_START * 10UL) / 9UL), ((SERVO_WRIST_START * 10UL) / 9UL)};

ISR(TIMER0_COMPA_vect)
{
     2e2:	1f 92       	push	r1
     2e4:	0f 92       	push	r0
     2e6:	0f b6       	in	r0, 0x3f	; 63
     2e8:	0f 92       	push	r0
     2ea:	11 24       	eor	r1, r1
     2ec:	2f 93       	push	r18
     2ee:	3f 93       	push	r19
     2f0:	4f 93       	push	r20
     2f2:	8f 93       	push	r24
     2f4:	9f 93       	push	r25
	// End of cycle
	if(pwm_cycle++ > 2000)
     2f6:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <__data_end>
     2fa:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <__data_end+0x1>
     2fe:	9c 01       	movw	r18, r24
     300:	2f 5f       	subi	r18, 0xFF	; 255
     302:	3f 4f       	sbci	r19, 0xFF	; 255
     304:	30 93 63 01 	sts	0x0163, r19	; 0x800163 <__data_end+0x1>
     308:	20 93 62 01 	sts	0x0162, r18	; 0x800162 <__data_end>
     30c:	81 3d       	cpi	r24, 0xD1	; 209
     30e:	97 40       	sbci	r25, 0x07	; 7
     310:	48 f0       	brcs	.+18     	; 0x324 <__vector_14+0x42>
	{
		SERVO_BASE_PORT &= ~(1<<SERVO_BASE);
     312:	2b 98       	cbi	0x05, 3	; 5
		SERVO_SHOULDER_PORT &= ~(1<<SERVO_SHOULDER);
     314:	2a 98       	cbi	0x05, 2	; 5
		SERVO_ELBOW_PORT &= ~(1<<SERVO_ELBOW);
     316:	29 98       	cbi	0x05, 1	; 5
		SERVO_WRIST_PORT &= ~(1<<SERVO_WRIST);
     318:	5e 98       	cbi	0x0b, 6	; 11
		SERVO_CAM_PORT &= ~(1<<SERVO_CAM);
     31a:	5d 98       	cbi	0x0b, 5	; 11
		pwm_cycle = 0;
     31c:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <__data_end+0x1>
     320:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <__data_end>
	}
	//1750 to 2000 => Control pulse
	if(pwm_cycle > 1750)
     324:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <__data_end>
     328:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <__data_end+0x1>
     32c:	87 3d       	cpi	r24, 0xD7	; 215
     32e:	96 40       	sbci	r25, 0x06	; 6
     330:	08 f4       	brcc	.+2      	; 0x334 <__vector_14+0x52>
     332:	40 c0       	rjmp	.+128    	; 0x3b4 <__vector_14+0xd2>
	{
		if(pwm_cycle > 1950 - motor_vals[0])
     334:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <motor_vals>
     338:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <__data_end>
     33c:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <__data_end+0x1>
     340:	8e e9       	ldi	r24, 0x9E	; 158
     342:	97 e0       	ldi	r25, 0x07	; 7
     344:	84 1b       	sub	r24, r20
     346:	91 09       	sbc	r25, r1
     348:	82 17       	cp	r24, r18
     34a:	93 07       	cpc	r25, r19
     34c:	08 f4       	brcc	.+2      	; 0x350 <__vector_14+0x6e>
		{
			SERVO_BASE_PORT |= (1<<SERVO_BASE);
     34e:	2b 9a       	sbi	0x05, 3	; 5
		}
		if(pwm_cycle > 1950 - motor_vals[1])
     350:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <motor_vals+0x1>
     354:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <__data_end>
     358:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <__data_end+0x1>
     35c:	8e e9       	ldi	r24, 0x9E	; 158
     35e:	97 e0       	ldi	r25, 0x07	; 7
     360:	84 1b       	sub	r24, r20
     362:	91 09       	sbc	r25, r1
     364:	82 17       	cp	r24, r18
     366:	93 07       	cpc	r25, r19
     368:	08 f4       	brcc	.+2      	; 0x36c <__vector_14+0x8a>
		{
			SERVO_SHOULDER_PORT |= (1<<SERVO_SHOULDER);
     36a:	2a 9a       	sbi	0x05, 2	; 5
		}
		if(pwm_cycle > 1950 - motor_vals[2])
     36c:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <motor_vals+0x2>
     370:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <__data_end>
     374:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <__data_end+0x1>
     378:	8e e9       	ldi	r24, 0x9E	; 158
     37a:	97 e0       	ldi	r25, 0x07	; 7
     37c:	84 1b       	sub	r24, r20
     37e:	91 09       	sbc	r25, r1
     380:	82 17       	cp	r24, r18
     382:	93 07       	cpc	r25, r19
     384:	08 f4       	brcc	.+2      	; 0x388 <__vector_14+0xa6>
		{
			SERVO_ELBOW_PORT |= (1<<SERVO_ELBOW);
     386:	29 9a       	sbi	0x05, 1	; 5
		}
		if(pwm_cycle > 1950 - motor_vals[3])
     388:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <motor_vals+0x3>
     38c:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <__data_end>
     390:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <__data_end+0x1>
     394:	8e e9       	ldi	r24, 0x9E	; 158
     396:	97 e0       	ldi	r25, 0x07	; 7
     398:	84 1b       	sub	r24, r20
     39a:	91 09       	sbc	r25, r1
     39c:	82 17       	cp	r24, r18
     39e:	93 07       	cpc	r25, r19
     3a0:	08 f4       	brcc	.+2      	; 0x3a4 <__vector_14+0xc2>
		{
			SERVO_WRIST_PORT |= (1<<SERVO_WRIST);
     3a2:	5e 9a       	sbi	0x0b, 6	; 11
		}
		if(pwm_cycle > 1845)
     3a4:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <__data_end>
     3a8:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <__data_end+0x1>
     3ac:	86 33       	cpi	r24, 0x36	; 54
     3ae:	97 40       	sbci	r25, 0x07	; 7
     3b0:	08 f0       	brcs	.+2      	; 0x3b4 <__vector_14+0xd2>
		{
			SERVO_CAM_PORT |= (1<<SERVO_CAM);
     3b2:	5d 9a       	sbi	0x0b, 5	; 11
		}
	}
	
}
     3b4:	9f 91       	pop	r25
     3b6:	8f 91       	pop	r24
     3b8:	4f 91       	pop	r20
     3ba:	3f 91       	pop	r19
     3bc:	2f 91       	pop	r18
     3be:	0f 90       	pop	r0
     3c0:	0f be       	out	0x3f, r0	; 63
     3c2:	0f 90       	pop	r0
     3c4:	1f 90       	pop	r1
     3c6:	18 95       	reti

000003c8 <servo_get>:

unsigned int servo_get(unsigned char id)
{
     3c8:	0f 93       	push	r16
     3ca:	1f 93       	push	r17
	return convert_motorsteps_to_degrees(motor_vals[id]);
     3cc:	e8 2f       	mov	r30, r24
     3ce:	f0 e0       	ldi	r31, 0x00	; 0
     3d0:	eb 5f       	subi	r30, 0xFB	; 251
     3d2:	fe 4f       	sbci	r31, 0xFE	; 254
     3d4:	80 81       	ld	r24, Z
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	a0 e0       	ldi	r26, 0x00	; 0
     3da:	b0 e0       	ldi	r27, 0x00	; 0
     3dc:	ac 01       	movw	r20, r24
     3de:	bd 01       	movw	r22, r26
     3e0:	44 0f       	add	r20, r20
     3e2:	55 1f       	adc	r21, r21
     3e4:	66 1f       	adc	r22, r22
     3e6:	77 1f       	adc	r23, r23
     3e8:	44 0f       	add	r20, r20
     3ea:	55 1f       	adc	r21, r21
     3ec:	66 1f       	adc	r22, r22
     3ee:	77 1f       	adc	r23, r23
     3f0:	44 0f       	add	r20, r20
     3f2:	55 1f       	adc	r21, r21
     3f4:	66 1f       	adc	r22, r22
     3f6:	77 1f       	adc	r23, r23
     3f8:	8a 01       	movw	r16, r20
     3fa:	9b 01       	movw	r18, r22
     3fc:	08 0f       	add	r16, r24
     3fe:	19 1f       	adc	r17, r25
     400:	2a 1f       	adc	r18, r26
     402:	3b 1f       	adc	r19, r27
     404:	c9 01       	movw	r24, r18
     406:	b8 01       	movw	r22, r16
     408:	2a e0       	ldi	r18, 0x0A	; 10
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	40 e0       	ldi	r20, 0x00	; 0
     40e:	50 e0       	ldi	r21, 0x00	; 0
     410:	96 d1       	rcall	.+812    	; 0x73e <__udivmodsi4>
}
     412:	c9 01       	movw	r24, r18
     414:	1f 91       	pop	r17
     416:	0f 91       	pop	r16
     418:	08 95       	ret

0000041a <servo_allMotorsAtTarget>:

unsigned char servo_allMotorsAtTarget(unsigned char targetDagrees[])
{
     41a:	2f 92       	push	r2
     41c:	3f 92       	push	r3
     41e:	4f 92       	push	r4
     420:	5f 92       	push	r5
     422:	6f 92       	push	r6
     424:	7f 92       	push	r7
     426:	8f 92       	push	r8
     428:	9f 92       	push	r9
     42a:	af 92       	push	r10
     42c:	bf 92       	push	r11
     42e:	cf 92       	push	r12
     430:	df 92       	push	r13
     432:	ef 92       	push	r14
     434:	ff 92       	push	r15
     436:	0f 93       	push	r16
     438:	1f 93       	push	r17
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	1c 01       	movw	r2, r24
	for (unsigned char i = 0; i < 4; i++)
	{
		if(motor_vals[i] != convert_degrees_to_motorsteps(targetDagrees[i]))
     440:	c0 91 05 01 	lds	r28, 0x0105	; 0x800105 <motor_vals>
     444:	d0 e0       	ldi	r29, 0x00	; 0
     446:	fc 01       	movw	r30, r24
     448:	80 81       	ld	r24, Z
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	a0 e0       	ldi	r26, 0x00	; 0
     44e:	b0 e0       	ldi	r27, 0x00	; 0
     450:	88 0f       	add	r24, r24
     452:	99 1f       	adc	r25, r25
     454:	aa 1f       	adc	r26, r26
     456:	bb 1f       	adc	r27, r27
     458:	ac 01       	movw	r20, r24
     45a:	bd 01       	movw	r22, r26
     45c:	44 0f       	add	r20, r20
     45e:	55 1f       	adc	r21, r21
     460:	66 1f       	adc	r22, r22
     462:	77 1f       	adc	r23, r23
     464:	44 0f       	add	r20, r20
     466:	55 1f       	adc	r21, r21
     468:	66 1f       	adc	r22, r22
     46a:	77 1f       	adc	r23, r23
     46c:	8c 01       	movw	r16, r24
     46e:	9d 01       	movw	r18, r26
     470:	04 0f       	add	r16, r20
     472:	15 1f       	adc	r17, r21
     474:	26 1f       	adc	r18, r22
     476:	37 1f       	adc	r19, r23
     478:	c9 01       	movw	r24, r18
     47a:	b8 01       	movw	r22, r16
     47c:	29 e3       	ldi	r18, 0x39	; 57
     47e:	3e e8       	ldi	r19, 0x8E	; 142
     480:	43 ee       	ldi	r20, 0xE3	; 227
     482:	58 e3       	ldi	r21, 0x38	; 56
     484:	7e d1       	rcall	.+764    	; 0x782 <__umulsidi3>
     486:	00 e2       	ldi	r16, 0x20	; 32
     488:	a5 d1       	rcall	.+842    	; 0x7d4 <__lshrdi3>
     48a:	82 2e       	mov	r8, r18
     48c:	93 2e       	mov	r9, r19
     48e:	a4 2e       	mov	r10, r20
     490:	b5 2e       	mov	r11, r21
     492:	24 01       	movw	r4, r8
     494:	35 01       	movw	r6, r10
     496:	76 94       	lsr	r7
     498:	67 94       	ror	r6
     49a:	57 94       	ror	r5
     49c:	47 94       	ror	r4
     49e:	c4 15       	cp	r28, r4
     4a0:	d5 05       	cpc	r29, r5
     4a2:	09 f0       	breq	.+2      	; 0x4a6 <servo_allMotorsAtTarget+0x8c>
     4a4:	3f c0       	rjmp	.+126    	; 0x524 <servo_allMotorsAtTarget+0x10a>
     4a6:	61 01       	movw	r12, r2
     4a8:	1f ef       	ldi	r17, 0xFF	; 255
     4aa:	c1 1a       	sub	r12, r17
     4ac:	d1 0a       	sbc	r13, r17
     4ae:	c1 e0       	ldi	r28, 0x01	; 1
     4b0:	d0 e0       	ldi	r29, 0x00	; 0
     4b2:	fe 01       	movw	r30, r28
     4b4:	eb 5f       	subi	r30, 0xFB	; 251
     4b6:	fe 4f       	sbci	r31, 0xFE	; 254
     4b8:	e0 80       	ld	r14, Z
     4ba:	f6 01       	movw	r30, r12
     4bc:	81 91       	ld	r24, Z+
     4be:	6f 01       	movw	r12, r30
     4c0:	f1 2c       	mov	r15, r1
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	a0 e0       	ldi	r26, 0x00	; 0
     4c6:	b0 e0       	ldi	r27, 0x00	; 0
     4c8:	88 0f       	add	r24, r24
     4ca:	99 1f       	adc	r25, r25
     4cc:	aa 1f       	adc	r26, r26
     4ce:	bb 1f       	adc	r27, r27
     4d0:	ac 01       	movw	r20, r24
     4d2:	bd 01       	movw	r22, r26
     4d4:	44 0f       	add	r20, r20
     4d6:	55 1f       	adc	r21, r21
     4d8:	66 1f       	adc	r22, r22
     4da:	77 1f       	adc	r23, r23
     4dc:	44 0f       	add	r20, r20
     4de:	55 1f       	adc	r21, r21
     4e0:	66 1f       	adc	r22, r22
     4e2:	77 1f       	adc	r23, r23
     4e4:	8c 01       	movw	r16, r24
     4e6:	9d 01       	movw	r18, r26
     4e8:	04 0f       	add	r16, r20
     4ea:	15 1f       	adc	r17, r21
     4ec:	26 1f       	adc	r18, r22
     4ee:	37 1f       	adc	r19, r23
     4f0:	c9 01       	movw	r24, r18
     4f2:	b8 01       	movw	r22, r16
     4f4:	29 e3       	ldi	r18, 0x39	; 57
     4f6:	3e e8       	ldi	r19, 0x8E	; 142
     4f8:	43 ee       	ldi	r20, 0xE3	; 227
     4fa:	58 e3       	ldi	r21, 0x38	; 56
     4fc:	42 d1       	rcall	.+644    	; 0x782 <__umulsidi3>
     4fe:	00 e2       	ldi	r16, 0x20	; 32
     500:	69 d1       	rcall	.+722    	; 0x7d4 <__lshrdi3>
     502:	42 2e       	mov	r4, r18
     504:	53 2e       	mov	r5, r19
     506:	64 2e       	mov	r6, r20
     508:	75 2e       	mov	r7, r21
     50a:	76 94       	lsr	r7
     50c:	67 94       	ror	r6
     50e:	57 94       	ror	r5
     510:	47 94       	ror	r4
     512:	e4 14       	cp	r14, r4
     514:	f5 04       	cpc	r15, r5
     516:	41 f4       	brne	.+16     	; 0x528 <servo_allMotorsAtTarget+0x10e>
     518:	21 96       	adiw	r28, 0x01	; 1
	return convert_motorsteps_to_degrees(motor_vals[id]);
}

unsigned char servo_allMotorsAtTarget(unsigned char targetDagrees[])
{
	for (unsigned char i = 0; i < 4; i++)
     51a:	c4 30       	cpi	r28, 0x04	; 4
     51c:	d1 05       	cpc	r29, r1
     51e:	49 f6       	brne	.-110    	; 0x4b2 <servo_allMotorsAtTarget+0x98>
	{
		if(motor_vals[i] != convert_degrees_to_motorsteps(targetDagrees[i]))
			return 0;
	}
	
	return 1;
     520:	81 e0       	ldi	r24, 0x01	; 1
     522:	03 c0       	rjmp	.+6      	; 0x52a <servo_allMotorsAtTarget+0x110>
unsigned char servo_allMotorsAtTarget(unsigned char targetDagrees[])
{
	for (unsigned char i = 0; i < 4; i++)
	{
		if(motor_vals[i] != convert_degrees_to_motorsteps(targetDagrees[i]))
			return 0;
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	01 c0       	rjmp	.+2      	; 0x52a <servo_allMotorsAtTarget+0x110>
     528:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return 1;
}
     52a:	df 91       	pop	r29
     52c:	cf 91       	pop	r28
     52e:	1f 91       	pop	r17
     530:	0f 91       	pop	r16
     532:	ff 90       	pop	r15
     534:	ef 90       	pop	r14
     536:	df 90       	pop	r13
     538:	cf 90       	pop	r12
     53a:	bf 90       	pop	r11
     53c:	af 90       	pop	r10
     53e:	9f 90       	pop	r9
     540:	8f 90       	pop	r8
     542:	7f 90       	pop	r7
     544:	6f 90       	pop	r6
     546:	5f 90       	pop	r5
     548:	4f 90       	pop	r4
     54a:	3f 90       	pop	r3
     54c:	2f 90       	pop	r2
     54e:	08 95       	ret

00000550 <servo_moveOneStepToTarget>:

void servo_moveOneStepToTarget(unsigned char targetDagrees[])
{
     550:	4f 92       	push	r4
     552:	5f 92       	push	r5
     554:	6f 92       	push	r6
     556:	8f 92       	push	r8
     558:	9f 92       	push	r9
     55a:	af 92       	push	r10
     55c:	bf 92       	push	r11
     55e:	cf 92       	push	r12
     560:	df 92       	push	r13
     562:	ef 92       	push	r14
     564:	ff 92       	push	r15
     566:	0f 93       	push	r16
     568:	1f 93       	push	r17
     56a:	cf 93       	push	r28
     56c:	df 93       	push	r29
     56e:	2c 01       	movw	r4, r24
     570:	c0 e0       	ldi	r28, 0x00	; 0
     572:	d0 e0       	ldi	r29, 0x00	; 0
	for (unsigned char i = 0; i < 4; i++)
	{
		unsigned char val = convert_degrees_to_motorsteps(targetDagrees[i]);
     574:	f2 01       	movw	r30, r4
     576:	81 91       	ld	r24, Z+
     578:	2f 01       	movw	r4, r30
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	a0 e0       	ldi	r26, 0x00	; 0
     57e:	b0 e0       	ldi	r27, 0x00	; 0
     580:	88 0f       	add	r24, r24
     582:	99 1f       	adc	r25, r25
     584:	aa 1f       	adc	r26, r26
     586:	bb 1f       	adc	r27, r27
     588:	ac 01       	movw	r20, r24
     58a:	bd 01       	movw	r22, r26
     58c:	44 0f       	add	r20, r20
     58e:	55 1f       	adc	r21, r21
     590:	66 1f       	adc	r22, r22
     592:	77 1f       	adc	r23, r23
     594:	44 0f       	add	r20, r20
     596:	55 1f       	adc	r21, r21
     598:	66 1f       	adc	r22, r22
     59a:	77 1f       	adc	r23, r23
     59c:	8c 01       	movw	r16, r24
     59e:	9d 01       	movw	r18, r26
     5a0:	04 0f       	add	r16, r20
     5a2:	15 1f       	adc	r17, r21
     5a4:	26 1f       	adc	r18, r22
     5a6:	37 1f       	adc	r19, r23
     5a8:	c9 01       	movw	r24, r18
     5aa:	b8 01       	movw	r22, r16
     5ac:	29 e3       	ldi	r18, 0x39	; 57
     5ae:	3e e8       	ldi	r19, 0x8E	; 142
     5b0:	43 ee       	ldi	r20, 0xE3	; 227
     5b2:	58 e3       	ldi	r21, 0x38	; 56
     5b4:	e6 d0       	rcall	.+460    	; 0x782 <__umulsidi3>
     5b6:	00 e2       	ldi	r16, 0x20	; 32
     5b8:	0d d1       	rcall	.+538    	; 0x7d4 <__lshrdi3>
     5ba:	82 2e       	mov	r8, r18
     5bc:	93 2e       	mov	r9, r19
     5be:	a4 2e       	mov	r10, r20
     5c0:	b5 2e       	mov	r11, r21
     5c2:	d5 01       	movw	r26, r10
     5c4:	c4 01       	movw	r24, r8
     5c6:	b6 95       	lsr	r27
     5c8:	a7 95       	ror	r26
     5ca:	97 95       	ror	r25
     5cc:	87 95       	ror	r24
     5ce:	68 2e       	mov	r6, r24
		if(val < motor_vals[i])
     5d0:	fe 01       	movw	r30, r28
     5d2:	eb 5f       	subi	r30, 0xFB	; 251
     5d4:	fe 4f       	sbci	r31, 0xFE	; 254
     5d6:	20 81       	ld	r18, Z
     5d8:	62 16       	cp	r6, r18
     5da:	38 f4       	brcc	.+14     	; 0x5ea <servo_moveOneStepToTarget+0x9a>
			motor_vals[i]--;
     5dc:	fe 01       	movw	r30, r28
     5de:	eb 5f       	subi	r30, 0xFB	; 251
     5e0:	fe 4f       	sbci	r31, 0xFE	; 254
     5e2:	80 81       	ld	r24, Z
     5e4:	81 50       	subi	r24, 0x01	; 1
     5e6:	80 83       	st	Z, r24
     5e8:	0c c0       	rjmp	.+24     	; 0x602 <servo_moveOneStepToTarget+0xb2>
		else if(val > motor_vals[i])
     5ea:	fe 01       	movw	r30, r28
     5ec:	eb 5f       	subi	r30, 0xFB	; 251
     5ee:	fe 4f       	sbci	r31, 0xFE	; 254
     5f0:	20 81       	ld	r18, Z
     5f2:	26 15       	cp	r18, r6
     5f4:	30 f4       	brcc	.+12     	; 0x602 <servo_moveOneStepToTarget+0xb2>
			motor_vals[i]++;
     5f6:	fe 01       	movw	r30, r28
     5f8:	eb 5f       	subi	r30, 0xFB	; 251
     5fa:	fe 4f       	sbci	r31, 0xFE	; 254
     5fc:	80 81       	ld	r24, Z
     5fe:	8f 5f       	subi	r24, 0xFF	; 255
     600:	80 83       	st	Z, r24
     602:	21 96       	adiw	r28, 0x01	; 1
	return 1;
}

void servo_moveOneStepToTarget(unsigned char targetDagrees[])
{
	for (unsigned char i = 0; i < 4; i++)
     604:	c4 30       	cpi	r28, 0x04	; 4
     606:	d1 05       	cpc	r29, r1
     608:	09 f0       	breq	.+2      	; 0x60c <servo_moveOneStepToTarget+0xbc>
     60a:	b4 cf       	rjmp	.-152    	; 0x574 <servo_moveOneStepToTarget+0x24>
		if(val < motor_vals[i])
			motor_vals[i]--;
		else if(val > motor_vals[i])
			motor_vals[i]++;
	}
}
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
     610:	1f 91       	pop	r17
     612:	0f 91       	pop	r16
     614:	ff 90       	pop	r15
     616:	ef 90       	pop	r14
     618:	df 90       	pop	r13
     61a:	cf 90       	pop	r12
     61c:	bf 90       	pop	r11
     61e:	af 90       	pop	r10
     620:	9f 90       	pop	r9
     622:	8f 90       	pop	r8
     624:	6f 90       	pop	r6
     626:	5f 90       	pop	r5
     628:	4f 90       	pop	r4
     62a:	08 95       	ret

0000062c <servo_moveToStartPosition>:

void servo_moveToStartPosition(void)
{
     62c:	cf 93       	push	r28
     62e:	df 93       	push	r29
     630:	00 d0       	rcall	.+0      	; 0x632 <servo_moveToStartPosition+0x6>
     632:	00 d0       	rcall	.+0      	; 0x634 <servo_moveToStartPosition+0x8>
     634:	cd b7       	in	r28, 0x3d	; 61
     636:	de b7       	in	r29, 0x3e	; 62
	unsigned char startDegrees[] = {SERVO_BASE_START, SERVO_SHOULDER_START, SERVO_ELBOW_START, SERVO_WRIST_START};
     638:	8a e5       	ldi	r24, 0x5A	; 90
     63a:	89 83       	std	Y+1, r24	; 0x01
     63c:	87 e8       	ldi	r24, 0x87	; 135
     63e:	8a 83       	std	Y+2, r24	; 0x02
     640:	86 e9       	ldi	r24, 0x96	; 150
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	8b e9       	ldi	r24, 0x9B	; 155
     646:	8c 83       	std	Y+4, r24	; 0x04
	while (!servo_allMotorsAtTarget(startDegrees))
     648:	0c c0       	rjmp	.+24     	; 0x662 <servo_moveToStartPosition+0x36>
	{
		servo_moveOneStepToTarget(startDegrees);
     64a:	ce 01       	movw	r24, r28
     64c:	01 96       	adiw	r24, 0x01	; 1
     64e:	80 df       	rcall	.-256    	; 0x550 <servo_moveOneStepToTarget>
     650:	2f ef       	ldi	r18, 0xFF	; 255
     652:	89 ef       	ldi	r24, 0xF9	; 249
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	21 50       	subi	r18, 0x01	; 1
     658:	80 40       	sbci	r24, 0x00	; 0
     65a:	90 40       	sbci	r25, 0x00	; 0
     65c:	e1 f7       	brne	.-8      	; 0x656 <servo_moveToStartPosition+0x2a>
     65e:	00 c0       	rjmp	.+0      	; 0x660 <servo_moveToStartPosition+0x34>
     660:	00 00       	nop
}

void servo_moveToStartPosition(void)
{
	unsigned char startDegrees[] = {SERVO_BASE_START, SERVO_SHOULDER_START, SERVO_ELBOW_START, SERVO_WRIST_START};
	while (!servo_allMotorsAtTarget(startDegrees))
     662:	ce 01       	movw	r24, r28
     664:	01 96       	adiw	r24, 0x01	; 1
     666:	d9 de       	rcall	.-590    	; 0x41a <servo_allMotorsAtTarget>
     668:	88 23       	and	r24, r24
     66a:	79 f3       	breq	.-34     	; 0x64a <servo_moveToStartPosition+0x1e>
	{
		servo_moveOneStepToTarget(startDegrees);
		_delay_ms(DELAY_TIME);
	}
     66c:	0f 90       	pop	r0
     66e:	0f 90       	pop	r0
     670:	0f 90       	pop	r0
     672:	0f 90       	pop	r0
     674:	df 91       	pop	r29
     676:	cf 91       	pop	r28
     678:	08 95       	ret

0000067a <uart_putchar>:
    //  |    Return:    0x00    ->  Transmission complete               |
    //  +---------------------------------------------------------------+
    int uart_putchar(char data, FILE *stream)
    {
        // Wait until last transmission completed
        while(!(UCSR0A & (1<<UDRE0)))
     67a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     67e:	95 fd       	sbrc	r25, 5
     680:	06 c0       	rjmp	.+12     	; 0x68e <uart_putchar+0x14>
     682:	e0 ec       	ldi	r30, 0xC0	; 192
     684:	f0 e0       	ldi	r31, 0x00	; 0
            asm volatile("NOP");
     686:	00 00       	nop
    //  |    Return:    0x00    ->  Transmission complete               |
    //  +---------------------------------------------------------------+
    int uart_putchar(char data, FILE *stream)
    {
        // Wait until last transmission completed
        while(!(UCSR0A & (1<<UDRE0)))
     688:	90 81       	ld	r25, Z
     68a:	95 ff       	sbrs	r25, 5
     68c:	fc cf       	rjmp	.-8      	; 0x686 <uart_putchar+0xc>
            asm volatile("NOP");
    
        UDR0 = data; // Write data to transmission register
     68e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    
        // C99 functions needs an int as a return parameter
        return 0;   // Return that there was no fault
    }
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	08 95       	ret

00000698 <uart_getchar>:
    //  | Parameter:    stream (ptr)    ->  Datastream                  |
    //  |                                                               |
    //  |    Return:    0x??    ->  data/NUL                            |
    //  +---------------------------------------------------------------+
    int uart_getchar(FILE *stream)
    {
     698:	cf 93       	push	r28
        // Wait until data has been received
        while(!(UCSR0A & (1<<RXC0)));
     69a:	e0 ec       	ldi	r30, 0xC0	; 192
     69c:	f0 e0       	ldi	r31, 0x00	; 0
     69e:	80 81       	ld	r24, Z
     6a0:	88 23       	and	r24, r24
     6a2:	ec f7       	brge	.-6      	; 0x69e <uart_getchar+0x6>
    
        // Ckeck if there was an error
        // Frame error
        if(UCSR0A & (1<<FE0))
     6a4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     6a8:	84 ff       	sbrs	r24, 4
     6aa:	05 c0       	rjmp	.+10     	; 0x6b6 <uart_getchar+0x1e>
        {
            UDR0;        // Clear UART data register
     6ac:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
            return 0;   // Return NUL
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	1c c0       	rjmp	.+56     	; 0x6ee <uart_getchar+0x56>
        }
        // Data Overrun error
        else if(UCSR0A & (1<<DOR0))
     6b6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     6ba:	83 ff       	sbrs	r24, 3
     6bc:	05 c0       	rjmp	.+10     	; 0x6c8 <uart_getchar+0x30>
        {
            UDR0;        // Clear UART data register
     6be:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
            return 0;   // Return NUL
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	13 c0       	rjmp	.+38     	; 0x6ee <uart_getchar+0x56>
        }
        // Parity error
        else if(UCSR0A & (1<<UPE0))
     6c8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     6cc:	82 ff       	sbrs	r24, 2
     6ce:	05 c0       	rjmp	.+10     	; 0x6da <uart_getchar+0x42>
        {
            UDR0;        // Clear UART data register
     6d0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
            return 0;   // Return NUL
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	0a c0       	rjmp	.+20     	; 0x6ee <uart_getchar+0x56>
        }
    
        #ifdef UART_RXC_ECHO
            // Write UART data register to data variable
            char data = UDR0;
     6da:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
        
            // Send echo of received data to UART 
            uart_putchar(data, stdout);
     6de:	60 91 7f 01 	lds	r22, 0x017F	; 0x80017f <__iob+0x2>
     6e2:	70 91 80 01 	lds	r23, 0x0180	; 0x800180 <__iob+0x3>
     6e6:	8c 2f       	mov	r24, r28
     6e8:	c8 df       	rcall	.-112    	; 0x67a <uart_putchar>
        
            return data;    // Return received data
     6ea:	8c 2f       	mov	r24, r28
     6ec:	90 e0       	ldi	r25, 0x00	; 0
        #else
            return UDR0; // Return UART data register
        #endif
    }
     6ee:	cf 91       	pop	r28
     6f0:	08 95       	ret

000006f2 <uart_init>:
{   
    // Check which bit sampling mode should be activated
    #if USE_2X
    UCSR0A |= (1<<U2X0);      // Setup 8 samples/bit
    #else
    UCSR0A &= ~(1<<U2X0);     // Setup 16 samples/bit
     6f2:	e0 ec       	ldi	r30, 0xC0	; 192
     6f4:	f0 e0       	ldi	r31, 0x00	; 0
     6f6:	80 81       	ld	r24, Z
     6f8:	8d 7f       	andi	r24, 0xFD	; 253
     6fa:	80 83       	st	Z, r24
    #endif

    UBRR0H = (0x0F & UBRRH_VALUE);   // Calculated through setbaud.h
     6fc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    UBRR0L = UBRRL_VALUE;            // Calculated through setbaud.h
     700:	89 e1       	ldi	r24, 0x19	; 25
     702:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    
    #if UART_STOPBITS > 1
        SETREG |= (0x08 & (UART_STOPBITS<<3));      // Setup stop bits
    #endif
    
    UCSR0C = SETREG;                 // Write SETREG settings to UCSRC
     706:	86 e8       	ldi	r24, 0x86	; 134
     708:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    UCSR0B = (1<<RXEN0) | (1<<TXEN0);  // Activate UART transmitter and receiver
     70c:	88 e1       	ldi	r24, 0x18	; 24
     70e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
        sei();
    #endif

    // Setup stream to stdout
    #if !defined(UARTTXCIE) && !defined(UARTUDRIE)
        stdout = &std_uart;
     712:	ed e7       	ldi	r30, 0x7D	; 125
     714:	f1 e0       	ldi	r31, 0x01	; 1
     716:	89 e0       	ldi	r24, 0x09	; 9
     718:	91 e0       	ldi	r25, 0x01	; 1
     71a:	93 83       	std	Z+3, r25	; 0x03
     71c:	82 83       	std	Z+2, r24	; 0x02
    #endif
    
    // Setup stream to stdin
    #if !defined(UARTRXCIE)
        stdin = &std_uart;
     71e:	91 83       	std	Z+1, r25	; 0x01
     720:	80 83       	st	Z, r24
     722:	08 95       	ret

00000724 <uart_error>:

    //  +---------------------------------------------------------------+
    //  |                   UART error handler                          |
    //  +---------------------------------------------------------------+
    void uart_error(void)
    {
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
        clearerr(stdin);    // Clear error on stream
     728:	cd e7       	ldi	r28, 0x7D	; 125
     72a:	d1 e0       	ldi	r29, 0x01	; 1
     72c:	88 81       	ld	r24, Y
     72e:	99 81       	ldd	r25, Y+1	; 0x01
     730:	84 d0       	rcall	.+264    	; 0x83a <clearerr>
        getchar();          // Remove character from stream
     732:	88 81       	ld	r24, Y
     734:	99 81       	ldd	r25, Y+1	; 0x01
     736:	86 d0       	rcall	.+268    	; 0x844 <fgetc>
    }
     738:	df 91       	pop	r29
     73a:	cf 91       	pop	r28
     73c:	08 95       	ret

0000073e <__udivmodsi4>:
     73e:	a1 e2       	ldi	r26, 0x21	; 33
     740:	1a 2e       	mov	r1, r26
     742:	aa 1b       	sub	r26, r26
     744:	bb 1b       	sub	r27, r27
     746:	fd 01       	movw	r30, r26
     748:	0d c0       	rjmp	.+26     	; 0x764 <__udivmodsi4_ep>

0000074a <__udivmodsi4_loop>:
     74a:	aa 1f       	adc	r26, r26
     74c:	bb 1f       	adc	r27, r27
     74e:	ee 1f       	adc	r30, r30
     750:	ff 1f       	adc	r31, r31
     752:	a2 17       	cp	r26, r18
     754:	b3 07       	cpc	r27, r19
     756:	e4 07       	cpc	r30, r20
     758:	f5 07       	cpc	r31, r21
     75a:	20 f0       	brcs	.+8      	; 0x764 <__udivmodsi4_ep>
     75c:	a2 1b       	sub	r26, r18
     75e:	b3 0b       	sbc	r27, r19
     760:	e4 0b       	sbc	r30, r20
     762:	f5 0b       	sbc	r31, r21

00000764 <__udivmodsi4_ep>:
     764:	66 1f       	adc	r22, r22
     766:	77 1f       	adc	r23, r23
     768:	88 1f       	adc	r24, r24
     76a:	99 1f       	adc	r25, r25
     76c:	1a 94       	dec	r1
     76e:	69 f7       	brne	.-38     	; 0x74a <__udivmodsi4_loop>
     770:	60 95       	com	r22
     772:	70 95       	com	r23
     774:	80 95       	com	r24
     776:	90 95       	com	r25
     778:	9b 01       	movw	r18, r22
     77a:	ac 01       	movw	r20, r24
     77c:	bd 01       	movw	r22, r26
     77e:	cf 01       	movw	r24, r30
     780:	08 95       	ret

00000782 <__umulsidi3>:
     782:	e8 94       	clt

00000784 <__umulsidi3_helper>:
     784:	df 93       	push	r29
     786:	cf 93       	push	r28
     788:	fc 01       	movw	r30, r24
     78a:	db 01       	movw	r26, r22
     78c:	3f d0       	rcall	.+126    	; 0x80c <__umulhisi3>
     78e:	7f 93       	push	r23
     790:	6f 93       	push	r22
     792:	e9 01       	movw	r28, r18
     794:	9a 01       	movw	r18, r20
     796:	ac 01       	movw	r20, r24
     798:	bf 93       	push	r27
     79a:	af 93       	push	r26
     79c:	3f 93       	push	r19
     79e:	2f 93       	push	r18
     7a0:	df 01       	movw	r26, r30
     7a2:	34 d0       	rcall	.+104    	; 0x80c <__umulhisi3>
     7a4:	26 f4       	brtc	.+8      	; 0x7ae <__umulsidi3_helper+0x2a>
     7a6:	6c 1b       	sub	r22, r28
     7a8:	7d 0b       	sbc	r23, r29
     7aa:	82 0b       	sbc	r24, r18
     7ac:	93 0b       	sbc	r25, r19
     7ae:	9e 01       	movw	r18, r28
     7b0:	eb 01       	movw	r28, r22
     7b2:	fc 01       	movw	r30, r24
     7b4:	3a d0       	rcall	.+116    	; 0x82a <__muldi3_6>
     7b6:	af 91       	pop	r26
     7b8:	bf 91       	pop	r27
     7ba:	2f 91       	pop	r18
     7bc:	3f 91       	pop	r19
     7be:	35 d0       	rcall	.+106    	; 0x82a <__muldi3_6>
     7c0:	be 01       	movw	r22, r28
     7c2:	cf 01       	movw	r24, r30
     7c4:	f9 01       	movw	r30, r18
     7c6:	2f 91       	pop	r18
     7c8:	3f 91       	pop	r19
     7ca:	cf 91       	pop	r28
     7cc:	df 91       	pop	r29
     7ce:	08 95       	ret

000007d0 <__ashrdi3>:
     7d0:	97 fb       	bst	r25, 7
     7d2:	10 f8       	bld	r1, 0

000007d4 <__lshrdi3>:
     7d4:	16 94       	lsr	r1
     7d6:	00 08       	sbc	r0, r0
     7d8:	0f 93       	push	r16
     7da:	08 30       	cpi	r16, 0x08	; 8
     7dc:	98 f0       	brcs	.+38     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
     7de:	08 50       	subi	r16, 0x08	; 8
     7e0:	23 2f       	mov	r18, r19
     7e2:	34 2f       	mov	r19, r20
     7e4:	45 2f       	mov	r20, r21
     7e6:	56 2f       	mov	r21, r22
     7e8:	67 2f       	mov	r22, r23
     7ea:	78 2f       	mov	r23, r24
     7ec:	89 2f       	mov	r24, r25
     7ee:	90 2d       	mov	r25, r0
     7f0:	f4 cf       	rjmp	.-24     	; 0x7da <__lshrdi3+0x6>
     7f2:	05 94       	asr	r0
     7f4:	97 95       	ror	r25
     7f6:	87 95       	ror	r24
     7f8:	77 95       	ror	r23
     7fa:	67 95       	ror	r22
     7fc:	57 95       	ror	r21
     7fe:	47 95       	ror	r20
     800:	37 95       	ror	r19
     802:	27 95       	ror	r18
     804:	0a 95       	dec	r16
     806:	aa f7       	brpl	.-22     	; 0x7f2 <__lshrdi3+0x1e>
     808:	0f 91       	pop	r16
     80a:	08 95       	ret

0000080c <__umulhisi3>:
     80c:	a2 9f       	mul	r26, r18
     80e:	b0 01       	movw	r22, r0
     810:	b3 9f       	mul	r27, r19
     812:	c0 01       	movw	r24, r0
     814:	a3 9f       	mul	r26, r19
     816:	70 0d       	add	r23, r0
     818:	81 1d       	adc	r24, r1
     81a:	11 24       	eor	r1, r1
     81c:	91 1d       	adc	r25, r1
     81e:	b2 9f       	mul	r27, r18
     820:	70 0d       	add	r23, r0
     822:	81 1d       	adc	r24, r1
     824:	11 24       	eor	r1, r1
     826:	91 1d       	adc	r25, r1
     828:	08 95       	ret

0000082a <__muldi3_6>:
     82a:	f0 df       	rcall	.-32     	; 0x80c <__umulhisi3>
     82c:	46 0f       	add	r20, r22
     82e:	57 1f       	adc	r21, r23
     830:	c8 1f       	adc	r28, r24
     832:	d9 1f       	adc	r29, r25
     834:	08 f4       	brcc	.+2      	; 0x838 <__muldi3_6+0xe>
     836:	31 96       	adiw	r30, 0x01	; 1
     838:	08 95       	ret

0000083a <clearerr>:
     83a:	fc 01       	movw	r30, r24
     83c:	93 81       	ldd	r25, Z+3	; 0x03
     83e:	9f 7c       	andi	r25, 0xCF	; 207
     840:	93 83       	std	Z+3, r25	; 0x03
     842:	08 95       	ret

00000844 <fgetc>:
     844:	cf 93       	push	r28
     846:	df 93       	push	r29
     848:	ec 01       	movw	r28, r24
     84a:	2b 81       	ldd	r18, Y+3	; 0x03
     84c:	20 ff       	sbrs	r18, 0
     84e:	33 c0       	rjmp	.+102    	; 0x8b6 <fgetc+0x72>
     850:	26 ff       	sbrs	r18, 6
     852:	0a c0       	rjmp	.+20     	; 0x868 <fgetc+0x24>
     854:	2f 7b       	andi	r18, 0xBF	; 191
     856:	2b 83       	std	Y+3, r18	; 0x03
     858:	8e 81       	ldd	r24, Y+6	; 0x06
     85a:	9f 81       	ldd	r25, Y+7	; 0x07
     85c:	01 96       	adiw	r24, 0x01	; 1
     85e:	9f 83       	std	Y+7, r25	; 0x07
     860:	8e 83       	std	Y+6, r24	; 0x06
     862:	8a 81       	ldd	r24, Y+2	; 0x02
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	29 c0       	rjmp	.+82     	; 0x8ba <fgetc+0x76>
     868:	22 ff       	sbrs	r18, 2
     86a:	0f c0       	rjmp	.+30     	; 0x88a <fgetc+0x46>
     86c:	e8 81       	ld	r30, Y
     86e:	f9 81       	ldd	r31, Y+1	; 0x01
     870:	80 81       	ld	r24, Z
     872:	08 2e       	mov	r0, r24
     874:	00 0c       	add	r0, r0
     876:	99 0b       	sbc	r25, r25
     878:	00 97       	sbiw	r24, 0x00	; 0
     87a:	19 f4       	brne	.+6      	; 0x882 <fgetc+0x3e>
     87c:	20 62       	ori	r18, 0x20	; 32
     87e:	2b 83       	std	Y+3, r18	; 0x03
     880:	1a c0       	rjmp	.+52     	; 0x8b6 <fgetc+0x72>
     882:	31 96       	adiw	r30, 0x01	; 1
     884:	f9 83       	std	Y+1, r31	; 0x01
     886:	e8 83       	st	Y, r30
     888:	0e c0       	rjmp	.+28     	; 0x8a6 <fgetc+0x62>
     88a:	ea 85       	ldd	r30, Y+10	; 0x0a
     88c:	fb 85       	ldd	r31, Y+11	; 0x0b
     88e:	09 95       	icall
     890:	97 ff       	sbrs	r25, 7
     892:	09 c0       	rjmp	.+18     	; 0x8a6 <fgetc+0x62>
     894:	2b 81       	ldd	r18, Y+3	; 0x03
     896:	01 96       	adiw	r24, 0x01	; 1
     898:	11 f0       	breq	.+4      	; 0x89e <fgetc+0x5a>
     89a:	80 e2       	ldi	r24, 0x20	; 32
     89c:	01 c0       	rjmp	.+2      	; 0x8a0 <fgetc+0x5c>
     89e:	80 e1       	ldi	r24, 0x10	; 16
     8a0:	82 2b       	or	r24, r18
     8a2:	8b 83       	std	Y+3, r24	; 0x03
     8a4:	08 c0       	rjmp	.+16     	; 0x8b6 <fgetc+0x72>
     8a6:	2e 81       	ldd	r18, Y+6	; 0x06
     8a8:	3f 81       	ldd	r19, Y+7	; 0x07
     8aa:	2f 5f       	subi	r18, 0xFF	; 255
     8ac:	3f 4f       	sbci	r19, 0xFF	; 255
     8ae:	3f 83       	std	Y+7, r19	; 0x07
     8b0:	2e 83       	std	Y+6, r18	; 0x06
     8b2:	99 27       	eor	r25, r25
     8b4:	02 c0       	rjmp	.+4      	; 0x8ba <fgetc+0x76>
     8b6:	8f ef       	ldi	r24, 0xFF	; 255
     8b8:	9f ef       	ldi	r25, 0xFF	; 255
     8ba:	df 91       	pop	r29
     8bc:	cf 91       	pop	r28
     8be:	08 95       	ret

000008c0 <printf>:
     8c0:	a0 e0       	ldi	r26, 0x00	; 0
     8c2:	b0 e0       	ldi	r27, 0x00	; 0
     8c4:	e5 e6       	ldi	r30, 0x65	; 101
     8c6:	f4 e0       	ldi	r31, 0x04	; 4
     8c8:	86 c5       	rjmp	.+2828   	; 0x13d6 <__prologue_saves__+0x20>
     8ca:	ae 01       	movw	r20, r28
     8cc:	4b 5f       	subi	r20, 0xFB	; 251
     8ce:	5f 4f       	sbci	r21, 0xFF	; 255
     8d0:	fa 01       	movw	r30, r20
     8d2:	61 91       	ld	r22, Z+
     8d4:	71 91       	ld	r23, Z+
     8d6:	af 01       	movw	r20, r30
     8d8:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <__iob+0x2>
     8dc:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <__iob+0x3>
     8e0:	2b d0       	rcall	.+86     	; 0x938 <vfprintf>
     8e2:	e2 e0       	ldi	r30, 0x02	; 2
     8e4:	94 c5       	rjmp	.+2856   	; 0x140e <__epilogue_restores__+0x20>

000008e6 <scanf>:
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	e8 e7       	ldi	r30, 0x78	; 120
     8ec:	f4 e0       	ldi	r31, 0x04	; 4
     8ee:	73 c5       	rjmp	.+2790   	; 0x13d6 <__prologue_saves__+0x20>
     8f0:	ae 01       	movw	r20, r28
     8f2:	4b 5f       	subi	r20, 0xFB	; 251
     8f4:	5f 4f       	sbci	r21, 0xFF	; 255
     8f6:	fa 01       	movw	r30, r20
     8f8:	61 91       	ld	r22, Z+
     8fa:	71 91       	ld	r23, Z+
     8fc:	af 01       	movw	r20, r30
     8fe:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <__iob>
     902:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <__iob+0x1>
     906:	77 d3       	rcall	.+1774   	; 0xff6 <vfscanf>
     908:	e2 e0       	ldi	r30, 0x02	; 2
     90a:	81 c5       	rjmp	.+2818   	; 0x140e <__epilogue_restores__+0x20>

0000090c <sscanf>:
     90c:	ae e0       	ldi	r26, 0x0E	; 14
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	eb e8       	ldi	r30, 0x8B	; 139
     912:	f4 e0       	ldi	r31, 0x04	; 4
     914:	60 c5       	rjmp	.+2752   	; 0x13d6 <__prologue_saves__+0x20>
     916:	85 e0       	ldi	r24, 0x05	; 5
     918:	8c 83       	std	Y+4, r24	; 0x04
     91a:	8b 89       	ldd	r24, Y+19	; 0x13
     91c:	9c 89       	ldd	r25, Y+20	; 0x14
     91e:	9a 83       	std	Y+2, r25	; 0x02
     920:	89 83       	std	Y+1, r24	; 0x01
     922:	ae 01       	movw	r20, r28
     924:	49 5e       	subi	r20, 0xE9	; 233
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	6d 89       	ldd	r22, Y+21	; 0x15
     92a:	7e 89       	ldd	r23, Y+22	; 0x16
     92c:	ce 01       	movw	r24, r28
     92e:	01 96       	adiw	r24, 0x01	; 1
     930:	62 d3       	rcall	.+1732   	; 0xff6 <vfscanf>
     932:	2e 96       	adiw	r28, 0x0e	; 14
     934:	e2 e0       	ldi	r30, 0x02	; 2
     936:	6b c5       	rjmp	.+2774   	; 0x140e <__epilogue_restores__+0x20>

00000938 <vfprintf>:
     938:	ab e0       	ldi	r26, 0x0B	; 11
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	e1 ea       	ldi	r30, 0xA1	; 161
     93e:	f4 e0       	ldi	r31, 0x04	; 4
     940:	3a c5       	rjmp	.+2676   	; 0x13b6 <__prologue_saves__>
     942:	6c 01       	movw	r12, r24
     944:	7b 01       	movw	r14, r22
     946:	8a 01       	movw	r16, r20
     948:	fc 01       	movw	r30, r24
     94a:	17 82       	std	Z+7, r1	; 0x07
     94c:	16 82       	std	Z+6, r1	; 0x06
     94e:	83 81       	ldd	r24, Z+3	; 0x03
     950:	81 ff       	sbrs	r24, 1
     952:	bf c1       	rjmp	.+894    	; 0xcd2 <vfprintf+0x39a>
     954:	ce 01       	movw	r24, r28
     956:	01 96       	adiw	r24, 0x01	; 1
     958:	3c 01       	movw	r6, r24
     95a:	f6 01       	movw	r30, r12
     95c:	93 81       	ldd	r25, Z+3	; 0x03
     95e:	f7 01       	movw	r30, r14
     960:	93 fd       	sbrc	r25, 3
     962:	85 91       	lpm	r24, Z+
     964:	93 ff       	sbrs	r25, 3
     966:	81 91       	ld	r24, Z+
     968:	7f 01       	movw	r14, r30
     96a:	88 23       	and	r24, r24
     96c:	09 f4       	brne	.+2      	; 0x970 <vfprintf+0x38>
     96e:	ad c1       	rjmp	.+858    	; 0xcca <vfprintf+0x392>
     970:	85 32       	cpi	r24, 0x25	; 37
     972:	39 f4       	brne	.+14     	; 0x982 <vfprintf+0x4a>
     974:	93 fd       	sbrc	r25, 3
     976:	85 91       	lpm	r24, Z+
     978:	93 ff       	sbrs	r25, 3
     97a:	81 91       	ld	r24, Z+
     97c:	7f 01       	movw	r14, r30
     97e:	85 32       	cpi	r24, 0x25	; 37
     980:	21 f4       	brne	.+8      	; 0x98a <vfprintf+0x52>
     982:	b6 01       	movw	r22, r12
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	61 d4       	rcall	.+2242   	; 0x124a <fputc>
     988:	e8 cf       	rjmp	.-48     	; 0x95a <vfprintf+0x22>
     98a:	91 2c       	mov	r9, r1
     98c:	21 2c       	mov	r2, r1
     98e:	31 2c       	mov	r3, r1
     990:	ff e1       	ldi	r31, 0x1F	; 31
     992:	f3 15       	cp	r31, r3
     994:	d8 f0       	brcs	.+54     	; 0x9cc <vfprintf+0x94>
     996:	8b 32       	cpi	r24, 0x2B	; 43
     998:	79 f0       	breq	.+30     	; 0x9b8 <vfprintf+0x80>
     99a:	38 f4       	brcc	.+14     	; 0x9aa <vfprintf+0x72>
     99c:	80 32       	cpi	r24, 0x20	; 32
     99e:	79 f0       	breq	.+30     	; 0x9be <vfprintf+0x86>
     9a0:	83 32       	cpi	r24, 0x23	; 35
     9a2:	a1 f4       	brne	.+40     	; 0x9cc <vfprintf+0x94>
     9a4:	23 2d       	mov	r18, r3
     9a6:	20 61       	ori	r18, 0x10	; 16
     9a8:	1d c0       	rjmp	.+58     	; 0x9e4 <vfprintf+0xac>
     9aa:	8d 32       	cpi	r24, 0x2D	; 45
     9ac:	61 f0       	breq	.+24     	; 0x9c6 <vfprintf+0x8e>
     9ae:	80 33       	cpi	r24, 0x30	; 48
     9b0:	69 f4       	brne	.+26     	; 0x9cc <vfprintf+0x94>
     9b2:	23 2d       	mov	r18, r3
     9b4:	21 60       	ori	r18, 0x01	; 1
     9b6:	16 c0       	rjmp	.+44     	; 0x9e4 <vfprintf+0xac>
     9b8:	83 2d       	mov	r24, r3
     9ba:	82 60       	ori	r24, 0x02	; 2
     9bc:	38 2e       	mov	r3, r24
     9be:	e3 2d       	mov	r30, r3
     9c0:	e4 60       	ori	r30, 0x04	; 4
     9c2:	3e 2e       	mov	r3, r30
     9c4:	2a c0       	rjmp	.+84     	; 0xa1a <vfprintf+0xe2>
     9c6:	f3 2d       	mov	r31, r3
     9c8:	f8 60       	ori	r31, 0x08	; 8
     9ca:	1d c0       	rjmp	.+58     	; 0xa06 <vfprintf+0xce>
     9cc:	37 fc       	sbrc	r3, 7
     9ce:	2d c0       	rjmp	.+90     	; 0xa2a <vfprintf+0xf2>
     9d0:	20 ed       	ldi	r18, 0xD0	; 208
     9d2:	28 0f       	add	r18, r24
     9d4:	2a 30       	cpi	r18, 0x0A	; 10
     9d6:	40 f0       	brcs	.+16     	; 0x9e8 <vfprintf+0xb0>
     9d8:	8e 32       	cpi	r24, 0x2E	; 46
     9da:	b9 f4       	brne	.+46     	; 0xa0a <vfprintf+0xd2>
     9dc:	36 fc       	sbrc	r3, 6
     9de:	75 c1       	rjmp	.+746    	; 0xcca <vfprintf+0x392>
     9e0:	23 2d       	mov	r18, r3
     9e2:	20 64       	ori	r18, 0x40	; 64
     9e4:	32 2e       	mov	r3, r18
     9e6:	19 c0       	rjmp	.+50     	; 0xa1a <vfprintf+0xe2>
     9e8:	36 fe       	sbrs	r3, 6
     9ea:	06 c0       	rjmp	.+12     	; 0x9f8 <vfprintf+0xc0>
     9ec:	8a e0       	ldi	r24, 0x0A	; 10
     9ee:	98 9e       	mul	r9, r24
     9f0:	20 0d       	add	r18, r0
     9f2:	11 24       	eor	r1, r1
     9f4:	92 2e       	mov	r9, r18
     9f6:	11 c0       	rjmp	.+34     	; 0xa1a <vfprintf+0xe2>
     9f8:	ea e0       	ldi	r30, 0x0A	; 10
     9fa:	2e 9e       	mul	r2, r30
     9fc:	20 0d       	add	r18, r0
     9fe:	11 24       	eor	r1, r1
     a00:	22 2e       	mov	r2, r18
     a02:	f3 2d       	mov	r31, r3
     a04:	f0 62       	ori	r31, 0x20	; 32
     a06:	3f 2e       	mov	r3, r31
     a08:	08 c0       	rjmp	.+16     	; 0xa1a <vfprintf+0xe2>
     a0a:	8c 36       	cpi	r24, 0x6C	; 108
     a0c:	21 f4       	brne	.+8      	; 0xa16 <vfprintf+0xde>
     a0e:	83 2d       	mov	r24, r3
     a10:	80 68       	ori	r24, 0x80	; 128
     a12:	38 2e       	mov	r3, r24
     a14:	02 c0       	rjmp	.+4      	; 0xa1a <vfprintf+0xe2>
     a16:	88 36       	cpi	r24, 0x68	; 104
     a18:	41 f4       	brne	.+16     	; 0xa2a <vfprintf+0xf2>
     a1a:	f7 01       	movw	r30, r14
     a1c:	93 fd       	sbrc	r25, 3
     a1e:	85 91       	lpm	r24, Z+
     a20:	93 ff       	sbrs	r25, 3
     a22:	81 91       	ld	r24, Z+
     a24:	7f 01       	movw	r14, r30
     a26:	81 11       	cpse	r24, r1
     a28:	b3 cf       	rjmp	.-154    	; 0x990 <vfprintf+0x58>
     a2a:	98 2f       	mov	r25, r24
     a2c:	9f 7d       	andi	r25, 0xDF	; 223
     a2e:	95 54       	subi	r25, 0x45	; 69
     a30:	93 30       	cpi	r25, 0x03	; 3
     a32:	28 f4       	brcc	.+10     	; 0xa3e <vfprintf+0x106>
     a34:	0c 5f       	subi	r16, 0xFC	; 252
     a36:	1f 4f       	sbci	r17, 0xFF	; 255
     a38:	9f e3       	ldi	r25, 0x3F	; 63
     a3a:	99 83       	std	Y+1, r25	; 0x01
     a3c:	0d c0       	rjmp	.+26     	; 0xa58 <vfprintf+0x120>
     a3e:	83 36       	cpi	r24, 0x63	; 99
     a40:	31 f0       	breq	.+12     	; 0xa4e <vfprintf+0x116>
     a42:	83 37       	cpi	r24, 0x73	; 115
     a44:	71 f0       	breq	.+28     	; 0xa62 <vfprintf+0x12a>
     a46:	83 35       	cpi	r24, 0x53	; 83
     a48:	09 f0       	breq	.+2      	; 0xa4c <vfprintf+0x114>
     a4a:	55 c0       	rjmp	.+170    	; 0xaf6 <vfprintf+0x1be>
     a4c:	20 c0       	rjmp	.+64     	; 0xa8e <vfprintf+0x156>
     a4e:	f8 01       	movw	r30, r16
     a50:	80 81       	ld	r24, Z
     a52:	89 83       	std	Y+1, r24	; 0x01
     a54:	0e 5f       	subi	r16, 0xFE	; 254
     a56:	1f 4f       	sbci	r17, 0xFF	; 255
     a58:	88 24       	eor	r8, r8
     a5a:	83 94       	inc	r8
     a5c:	91 2c       	mov	r9, r1
     a5e:	53 01       	movw	r10, r6
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <vfprintf+0x14e>
     a62:	28 01       	movw	r4, r16
     a64:	f2 e0       	ldi	r31, 0x02	; 2
     a66:	4f 0e       	add	r4, r31
     a68:	51 1c       	adc	r5, r1
     a6a:	f8 01       	movw	r30, r16
     a6c:	a0 80       	ld	r10, Z
     a6e:	b1 80       	ldd	r11, Z+1	; 0x01
     a70:	36 fe       	sbrs	r3, 6
     a72:	03 c0       	rjmp	.+6      	; 0xa7a <vfprintf+0x142>
     a74:	69 2d       	mov	r22, r9
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	02 c0       	rjmp	.+4      	; 0xa7e <vfprintf+0x146>
     a7a:	6f ef       	ldi	r22, 0xFF	; 255
     a7c:	7f ef       	ldi	r23, 0xFF	; 255
     a7e:	c5 01       	movw	r24, r10
     a80:	d9 d3       	rcall	.+1970   	; 0x1234 <strnlen>
     a82:	4c 01       	movw	r8, r24
     a84:	82 01       	movw	r16, r4
     a86:	f3 2d       	mov	r31, r3
     a88:	ff 77       	andi	r31, 0x7F	; 127
     a8a:	3f 2e       	mov	r3, r31
     a8c:	15 c0       	rjmp	.+42     	; 0xab8 <vfprintf+0x180>
     a8e:	28 01       	movw	r4, r16
     a90:	22 e0       	ldi	r18, 0x02	; 2
     a92:	42 0e       	add	r4, r18
     a94:	51 1c       	adc	r5, r1
     a96:	f8 01       	movw	r30, r16
     a98:	a0 80       	ld	r10, Z
     a9a:	b1 80       	ldd	r11, Z+1	; 0x01
     a9c:	36 fe       	sbrs	r3, 6
     a9e:	03 c0       	rjmp	.+6      	; 0xaa6 <vfprintf+0x16e>
     aa0:	69 2d       	mov	r22, r9
     aa2:	70 e0       	ldi	r23, 0x00	; 0
     aa4:	02 c0       	rjmp	.+4      	; 0xaaa <vfprintf+0x172>
     aa6:	6f ef       	ldi	r22, 0xFF	; 255
     aa8:	7f ef       	ldi	r23, 0xFF	; 255
     aaa:	c5 01       	movw	r24, r10
     aac:	b8 d3       	rcall	.+1904   	; 0x121e <strnlen_P>
     aae:	4c 01       	movw	r8, r24
     ab0:	f3 2d       	mov	r31, r3
     ab2:	f0 68       	ori	r31, 0x80	; 128
     ab4:	3f 2e       	mov	r3, r31
     ab6:	82 01       	movw	r16, r4
     ab8:	33 fc       	sbrc	r3, 3
     aba:	19 c0       	rjmp	.+50     	; 0xaee <vfprintf+0x1b6>
     abc:	82 2d       	mov	r24, r2
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	88 16       	cp	r8, r24
     ac2:	99 06       	cpc	r9, r25
     ac4:	a0 f4       	brcc	.+40     	; 0xaee <vfprintf+0x1b6>
     ac6:	b6 01       	movw	r22, r12
     ac8:	80 e2       	ldi	r24, 0x20	; 32
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	be d3       	rcall	.+1916   	; 0x124a <fputc>
     ace:	2a 94       	dec	r2
     ad0:	f5 cf       	rjmp	.-22     	; 0xabc <vfprintf+0x184>
     ad2:	f5 01       	movw	r30, r10
     ad4:	37 fc       	sbrc	r3, 7
     ad6:	85 91       	lpm	r24, Z+
     ad8:	37 fe       	sbrs	r3, 7
     ada:	81 91       	ld	r24, Z+
     adc:	5f 01       	movw	r10, r30
     ade:	b6 01       	movw	r22, r12
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	b3 d3       	rcall	.+1894   	; 0x124a <fputc>
     ae4:	21 10       	cpse	r2, r1
     ae6:	2a 94       	dec	r2
     ae8:	21 e0       	ldi	r18, 0x01	; 1
     aea:	82 1a       	sub	r8, r18
     aec:	91 08       	sbc	r9, r1
     aee:	81 14       	cp	r8, r1
     af0:	91 04       	cpc	r9, r1
     af2:	79 f7       	brne	.-34     	; 0xad2 <vfprintf+0x19a>
     af4:	e1 c0       	rjmp	.+450    	; 0xcb8 <vfprintf+0x380>
     af6:	84 36       	cpi	r24, 0x64	; 100
     af8:	11 f0       	breq	.+4      	; 0xafe <vfprintf+0x1c6>
     afa:	89 36       	cpi	r24, 0x69	; 105
     afc:	39 f5       	brne	.+78     	; 0xb4c <vfprintf+0x214>
     afe:	f8 01       	movw	r30, r16
     b00:	37 fe       	sbrs	r3, 7
     b02:	07 c0       	rjmp	.+14     	; 0xb12 <vfprintf+0x1da>
     b04:	60 81       	ld	r22, Z
     b06:	71 81       	ldd	r23, Z+1	; 0x01
     b08:	82 81       	ldd	r24, Z+2	; 0x02
     b0a:	93 81       	ldd	r25, Z+3	; 0x03
     b0c:	0c 5f       	subi	r16, 0xFC	; 252
     b0e:	1f 4f       	sbci	r17, 0xFF	; 255
     b10:	08 c0       	rjmp	.+16     	; 0xb22 <vfprintf+0x1ea>
     b12:	60 81       	ld	r22, Z
     b14:	71 81       	ldd	r23, Z+1	; 0x01
     b16:	07 2e       	mov	r0, r23
     b18:	00 0c       	add	r0, r0
     b1a:	88 0b       	sbc	r24, r24
     b1c:	99 0b       	sbc	r25, r25
     b1e:	0e 5f       	subi	r16, 0xFE	; 254
     b20:	1f 4f       	sbci	r17, 0xFF	; 255
     b22:	f3 2d       	mov	r31, r3
     b24:	ff 76       	andi	r31, 0x6F	; 111
     b26:	3f 2e       	mov	r3, r31
     b28:	97 ff       	sbrs	r25, 7
     b2a:	09 c0       	rjmp	.+18     	; 0xb3e <vfprintf+0x206>
     b2c:	90 95       	com	r25
     b2e:	80 95       	com	r24
     b30:	70 95       	com	r23
     b32:	61 95       	neg	r22
     b34:	7f 4f       	sbci	r23, 0xFF	; 255
     b36:	8f 4f       	sbci	r24, 0xFF	; 255
     b38:	9f 4f       	sbci	r25, 0xFF	; 255
     b3a:	f0 68       	ori	r31, 0x80	; 128
     b3c:	3f 2e       	mov	r3, r31
     b3e:	2a e0       	ldi	r18, 0x0A	; 10
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	a3 01       	movw	r20, r6
     b44:	d7 d3       	rcall	.+1966   	; 0x12f4 <__ultoa_invert>
     b46:	88 2e       	mov	r8, r24
     b48:	86 18       	sub	r8, r6
     b4a:	44 c0       	rjmp	.+136    	; 0xbd4 <vfprintf+0x29c>
     b4c:	85 37       	cpi	r24, 0x75	; 117
     b4e:	31 f4       	brne	.+12     	; 0xb5c <vfprintf+0x224>
     b50:	23 2d       	mov	r18, r3
     b52:	2f 7e       	andi	r18, 0xEF	; 239
     b54:	b2 2e       	mov	r11, r18
     b56:	2a e0       	ldi	r18, 0x0A	; 10
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	25 c0       	rjmp	.+74     	; 0xba6 <vfprintf+0x26e>
     b5c:	93 2d       	mov	r25, r3
     b5e:	99 7f       	andi	r25, 0xF9	; 249
     b60:	b9 2e       	mov	r11, r25
     b62:	8f 36       	cpi	r24, 0x6F	; 111
     b64:	c1 f0       	breq	.+48     	; 0xb96 <vfprintf+0x25e>
     b66:	18 f4       	brcc	.+6      	; 0xb6e <vfprintf+0x236>
     b68:	88 35       	cpi	r24, 0x58	; 88
     b6a:	79 f0       	breq	.+30     	; 0xb8a <vfprintf+0x252>
     b6c:	ae c0       	rjmp	.+348    	; 0xcca <vfprintf+0x392>
     b6e:	80 37       	cpi	r24, 0x70	; 112
     b70:	19 f0       	breq	.+6      	; 0xb78 <vfprintf+0x240>
     b72:	88 37       	cpi	r24, 0x78	; 120
     b74:	21 f0       	breq	.+8      	; 0xb7e <vfprintf+0x246>
     b76:	a9 c0       	rjmp	.+338    	; 0xcca <vfprintf+0x392>
     b78:	e9 2f       	mov	r30, r25
     b7a:	e0 61       	ori	r30, 0x10	; 16
     b7c:	be 2e       	mov	r11, r30
     b7e:	b4 fe       	sbrs	r11, 4
     b80:	0d c0       	rjmp	.+26     	; 0xb9c <vfprintf+0x264>
     b82:	fb 2d       	mov	r31, r11
     b84:	f4 60       	ori	r31, 0x04	; 4
     b86:	bf 2e       	mov	r11, r31
     b88:	09 c0       	rjmp	.+18     	; 0xb9c <vfprintf+0x264>
     b8a:	34 fe       	sbrs	r3, 4
     b8c:	0a c0       	rjmp	.+20     	; 0xba2 <vfprintf+0x26a>
     b8e:	29 2f       	mov	r18, r25
     b90:	26 60       	ori	r18, 0x06	; 6
     b92:	b2 2e       	mov	r11, r18
     b94:	06 c0       	rjmp	.+12     	; 0xba2 <vfprintf+0x26a>
     b96:	28 e0       	ldi	r18, 0x08	; 8
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	05 c0       	rjmp	.+10     	; 0xba6 <vfprintf+0x26e>
     b9c:	20 e1       	ldi	r18, 0x10	; 16
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	02 c0       	rjmp	.+4      	; 0xba6 <vfprintf+0x26e>
     ba2:	20 e1       	ldi	r18, 0x10	; 16
     ba4:	32 e0       	ldi	r19, 0x02	; 2
     ba6:	f8 01       	movw	r30, r16
     ba8:	b7 fe       	sbrs	r11, 7
     baa:	07 c0       	rjmp	.+14     	; 0xbba <vfprintf+0x282>
     bac:	60 81       	ld	r22, Z
     bae:	71 81       	ldd	r23, Z+1	; 0x01
     bb0:	82 81       	ldd	r24, Z+2	; 0x02
     bb2:	93 81       	ldd	r25, Z+3	; 0x03
     bb4:	0c 5f       	subi	r16, 0xFC	; 252
     bb6:	1f 4f       	sbci	r17, 0xFF	; 255
     bb8:	06 c0       	rjmp	.+12     	; 0xbc6 <vfprintf+0x28e>
     bba:	60 81       	ld	r22, Z
     bbc:	71 81       	ldd	r23, Z+1	; 0x01
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	0e 5f       	subi	r16, 0xFE	; 254
     bc4:	1f 4f       	sbci	r17, 0xFF	; 255
     bc6:	a3 01       	movw	r20, r6
     bc8:	95 d3       	rcall	.+1834   	; 0x12f4 <__ultoa_invert>
     bca:	88 2e       	mov	r8, r24
     bcc:	86 18       	sub	r8, r6
     bce:	fb 2d       	mov	r31, r11
     bd0:	ff 77       	andi	r31, 0x7F	; 127
     bd2:	3f 2e       	mov	r3, r31
     bd4:	36 fe       	sbrs	r3, 6
     bd6:	0d c0       	rjmp	.+26     	; 0xbf2 <vfprintf+0x2ba>
     bd8:	23 2d       	mov	r18, r3
     bda:	2e 7f       	andi	r18, 0xFE	; 254
     bdc:	a2 2e       	mov	r10, r18
     bde:	89 14       	cp	r8, r9
     be0:	58 f4       	brcc	.+22     	; 0xbf8 <vfprintf+0x2c0>
     be2:	34 fe       	sbrs	r3, 4
     be4:	0b c0       	rjmp	.+22     	; 0xbfc <vfprintf+0x2c4>
     be6:	32 fc       	sbrc	r3, 2
     be8:	09 c0       	rjmp	.+18     	; 0xbfc <vfprintf+0x2c4>
     bea:	83 2d       	mov	r24, r3
     bec:	8e 7e       	andi	r24, 0xEE	; 238
     bee:	a8 2e       	mov	r10, r24
     bf0:	05 c0       	rjmp	.+10     	; 0xbfc <vfprintf+0x2c4>
     bf2:	b8 2c       	mov	r11, r8
     bf4:	a3 2c       	mov	r10, r3
     bf6:	03 c0       	rjmp	.+6      	; 0xbfe <vfprintf+0x2c6>
     bf8:	b8 2c       	mov	r11, r8
     bfa:	01 c0       	rjmp	.+2      	; 0xbfe <vfprintf+0x2c6>
     bfc:	b9 2c       	mov	r11, r9
     bfe:	a4 fe       	sbrs	r10, 4
     c00:	0f c0       	rjmp	.+30     	; 0xc20 <vfprintf+0x2e8>
     c02:	fe 01       	movw	r30, r28
     c04:	e8 0d       	add	r30, r8
     c06:	f1 1d       	adc	r31, r1
     c08:	80 81       	ld	r24, Z
     c0a:	80 33       	cpi	r24, 0x30	; 48
     c0c:	21 f4       	brne	.+8      	; 0xc16 <vfprintf+0x2de>
     c0e:	9a 2d       	mov	r25, r10
     c10:	99 7e       	andi	r25, 0xE9	; 233
     c12:	a9 2e       	mov	r10, r25
     c14:	09 c0       	rjmp	.+18     	; 0xc28 <vfprintf+0x2f0>
     c16:	a2 fe       	sbrs	r10, 2
     c18:	06 c0       	rjmp	.+12     	; 0xc26 <vfprintf+0x2ee>
     c1a:	b3 94       	inc	r11
     c1c:	b3 94       	inc	r11
     c1e:	04 c0       	rjmp	.+8      	; 0xc28 <vfprintf+0x2f0>
     c20:	8a 2d       	mov	r24, r10
     c22:	86 78       	andi	r24, 0x86	; 134
     c24:	09 f0       	breq	.+2      	; 0xc28 <vfprintf+0x2f0>
     c26:	b3 94       	inc	r11
     c28:	a3 fc       	sbrc	r10, 3
     c2a:	10 c0       	rjmp	.+32     	; 0xc4c <vfprintf+0x314>
     c2c:	a0 fe       	sbrs	r10, 0
     c2e:	06 c0       	rjmp	.+12     	; 0xc3c <vfprintf+0x304>
     c30:	b2 14       	cp	r11, r2
     c32:	80 f4       	brcc	.+32     	; 0xc54 <vfprintf+0x31c>
     c34:	28 0c       	add	r2, r8
     c36:	92 2c       	mov	r9, r2
     c38:	9b 18       	sub	r9, r11
     c3a:	0d c0       	rjmp	.+26     	; 0xc56 <vfprintf+0x31e>
     c3c:	b2 14       	cp	r11, r2
     c3e:	58 f4       	brcc	.+22     	; 0xc56 <vfprintf+0x31e>
     c40:	b6 01       	movw	r22, r12
     c42:	80 e2       	ldi	r24, 0x20	; 32
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	01 d3       	rcall	.+1538   	; 0x124a <fputc>
     c48:	b3 94       	inc	r11
     c4a:	f8 cf       	rjmp	.-16     	; 0xc3c <vfprintf+0x304>
     c4c:	b2 14       	cp	r11, r2
     c4e:	18 f4       	brcc	.+6      	; 0xc56 <vfprintf+0x31e>
     c50:	2b 18       	sub	r2, r11
     c52:	02 c0       	rjmp	.+4      	; 0xc58 <vfprintf+0x320>
     c54:	98 2c       	mov	r9, r8
     c56:	21 2c       	mov	r2, r1
     c58:	a4 fe       	sbrs	r10, 4
     c5a:	0f c0       	rjmp	.+30     	; 0xc7a <vfprintf+0x342>
     c5c:	b6 01       	movw	r22, r12
     c5e:	80 e3       	ldi	r24, 0x30	; 48
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	f3 d2       	rcall	.+1510   	; 0x124a <fputc>
     c64:	a2 fe       	sbrs	r10, 2
     c66:	16 c0       	rjmp	.+44     	; 0xc94 <vfprintf+0x35c>
     c68:	a1 fc       	sbrc	r10, 1
     c6a:	03 c0       	rjmp	.+6      	; 0xc72 <vfprintf+0x33a>
     c6c:	88 e7       	ldi	r24, 0x78	; 120
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	02 c0       	rjmp	.+4      	; 0xc76 <vfprintf+0x33e>
     c72:	88 e5       	ldi	r24, 0x58	; 88
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	b6 01       	movw	r22, r12
     c78:	0c c0       	rjmp	.+24     	; 0xc92 <vfprintf+0x35a>
     c7a:	8a 2d       	mov	r24, r10
     c7c:	86 78       	andi	r24, 0x86	; 134
     c7e:	51 f0       	breq	.+20     	; 0xc94 <vfprintf+0x35c>
     c80:	a1 fe       	sbrs	r10, 1
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <vfprintf+0x350>
     c84:	8b e2       	ldi	r24, 0x2B	; 43
     c86:	01 c0       	rjmp	.+2      	; 0xc8a <vfprintf+0x352>
     c88:	80 e2       	ldi	r24, 0x20	; 32
     c8a:	a7 fc       	sbrc	r10, 7
     c8c:	8d e2       	ldi	r24, 0x2D	; 45
     c8e:	b6 01       	movw	r22, r12
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	db d2       	rcall	.+1462   	; 0x124a <fputc>
     c94:	89 14       	cp	r8, r9
     c96:	30 f4       	brcc	.+12     	; 0xca4 <vfprintf+0x36c>
     c98:	b6 01       	movw	r22, r12
     c9a:	80 e3       	ldi	r24, 0x30	; 48
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	d5 d2       	rcall	.+1450   	; 0x124a <fputc>
     ca0:	9a 94       	dec	r9
     ca2:	f8 cf       	rjmp	.-16     	; 0xc94 <vfprintf+0x35c>
     ca4:	8a 94       	dec	r8
     ca6:	f3 01       	movw	r30, r6
     ca8:	e8 0d       	add	r30, r8
     caa:	f1 1d       	adc	r31, r1
     cac:	80 81       	ld	r24, Z
     cae:	b6 01       	movw	r22, r12
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	cb d2       	rcall	.+1430   	; 0x124a <fputc>
     cb4:	81 10       	cpse	r8, r1
     cb6:	f6 cf       	rjmp	.-20     	; 0xca4 <vfprintf+0x36c>
     cb8:	22 20       	and	r2, r2
     cba:	09 f4       	brne	.+2      	; 0xcbe <vfprintf+0x386>
     cbc:	4e ce       	rjmp	.-868    	; 0x95a <vfprintf+0x22>
     cbe:	b6 01       	movw	r22, r12
     cc0:	80 e2       	ldi	r24, 0x20	; 32
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	c2 d2       	rcall	.+1412   	; 0x124a <fputc>
     cc6:	2a 94       	dec	r2
     cc8:	f7 cf       	rjmp	.-18     	; 0xcb8 <vfprintf+0x380>
     cca:	f6 01       	movw	r30, r12
     ccc:	86 81       	ldd	r24, Z+6	; 0x06
     cce:	97 81       	ldd	r25, Z+7	; 0x07
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <vfprintf+0x39e>
     cd2:	8f ef       	ldi	r24, 0xFF	; 255
     cd4:	9f ef       	ldi	r25, 0xFF	; 255
     cd6:	2b 96       	adiw	r28, 0x0b	; 11
     cd8:	e2 e1       	ldi	r30, 0x12	; 18
     cda:	89 c3       	rjmp	.+1810   	; 0x13ee <__epilogue_restores__>

00000cdc <putval>:
     cdc:	20 fd       	sbrc	r18, 0
     cde:	09 c0       	rjmp	.+18     	; 0xcf2 <putval+0x16>
     ce0:	fc 01       	movw	r30, r24
     ce2:	23 fd       	sbrc	r18, 3
     ce4:	05 c0       	rjmp	.+10     	; 0xcf0 <putval+0x14>
     ce6:	22 ff       	sbrs	r18, 2
     ce8:	02 c0       	rjmp	.+4      	; 0xcee <putval+0x12>
     cea:	73 83       	std	Z+3, r23	; 0x03
     cec:	62 83       	std	Z+2, r22	; 0x02
     cee:	51 83       	std	Z+1, r21	; 0x01
     cf0:	40 83       	st	Z, r20
     cf2:	08 95       	ret

00000cf4 <mulacc>:
     cf4:	44 fd       	sbrc	r20, 4
     cf6:	17 c0       	rjmp	.+46     	; 0xd26 <mulacc+0x32>
     cf8:	46 fd       	sbrc	r20, 6
     cfa:	17 c0       	rjmp	.+46     	; 0xd2a <mulacc+0x36>
     cfc:	ab 01       	movw	r20, r22
     cfe:	bc 01       	movw	r22, r24
     d00:	da 01       	movw	r26, r20
     d02:	fb 01       	movw	r30, r22
     d04:	aa 0f       	add	r26, r26
     d06:	bb 1f       	adc	r27, r27
     d08:	ee 1f       	adc	r30, r30
     d0a:	ff 1f       	adc	r31, r31
     d0c:	10 94       	com	r1
     d0e:	d1 f7       	brne	.-12     	; 0xd04 <mulacc+0x10>
     d10:	4a 0f       	add	r20, r26
     d12:	5b 1f       	adc	r21, r27
     d14:	6e 1f       	adc	r22, r30
     d16:	7f 1f       	adc	r23, r31
     d18:	cb 01       	movw	r24, r22
     d1a:	ba 01       	movw	r22, r20
     d1c:	66 0f       	add	r22, r22
     d1e:	77 1f       	adc	r23, r23
     d20:	88 1f       	adc	r24, r24
     d22:	99 1f       	adc	r25, r25
     d24:	09 c0       	rjmp	.+18     	; 0xd38 <mulacc+0x44>
     d26:	33 e0       	ldi	r19, 0x03	; 3
     d28:	01 c0       	rjmp	.+2      	; 0xd2c <mulacc+0x38>
     d2a:	34 e0       	ldi	r19, 0x04	; 4
     d2c:	66 0f       	add	r22, r22
     d2e:	77 1f       	adc	r23, r23
     d30:	88 1f       	adc	r24, r24
     d32:	99 1f       	adc	r25, r25
     d34:	31 50       	subi	r19, 0x01	; 1
     d36:	d1 f7       	brne	.-12     	; 0xd2c <mulacc+0x38>
     d38:	62 0f       	add	r22, r18
     d3a:	71 1d       	adc	r23, r1
     d3c:	81 1d       	adc	r24, r1
     d3e:	91 1d       	adc	r25, r1
     d40:	08 95       	ret

00000d42 <skip_spaces>:
     d42:	0f 93       	push	r16
     d44:	1f 93       	push	r17
     d46:	cf 93       	push	r28
     d48:	df 93       	push	r29
     d4a:	8c 01       	movw	r16, r24
     d4c:	c8 01       	movw	r24, r16
     d4e:	7a dd       	rcall	.-1292   	; 0x844 <fgetc>
     d50:	ec 01       	movw	r28, r24
     d52:	97 fd       	sbrc	r25, 7
     d54:	06 c0       	rjmp	.+12     	; 0xd62 <skip_spaces+0x20>
     d56:	50 d2       	rcall	.+1184   	; 0x11f8 <isspace>
     d58:	89 2b       	or	r24, r25
     d5a:	c1 f7       	brne	.-16     	; 0xd4c <skip_spaces+0xa>
     d5c:	b8 01       	movw	r22, r16
     d5e:	ce 01       	movw	r24, r28
     d60:	b0 d2       	rcall	.+1376   	; 0x12c2 <ungetc>
     d62:	ce 01       	movw	r24, r28
     d64:	df 91       	pop	r29
     d66:	cf 91       	pop	r28
     d68:	1f 91       	pop	r17
     d6a:	0f 91       	pop	r16
     d6c:	08 95       	ret

00000d6e <conv_int>:
     d6e:	8f 92       	push	r8
     d70:	9f 92       	push	r9
     d72:	af 92       	push	r10
     d74:	bf 92       	push	r11
     d76:	ef 92       	push	r14
     d78:	ff 92       	push	r15
     d7a:	0f 93       	push	r16
     d7c:	1f 93       	push	r17
     d7e:	cf 93       	push	r28
     d80:	df 93       	push	r29
     d82:	8c 01       	movw	r16, r24
     d84:	d6 2f       	mov	r29, r22
     d86:	7a 01       	movw	r14, r20
     d88:	b2 2e       	mov	r11, r18
     d8a:	5c dd       	rcall	.-1352   	; 0x844 <fgetc>
     d8c:	9c 01       	movw	r18, r24
     d8e:	33 27       	eor	r19, r19
     d90:	2b 32       	cpi	r18, 0x2B	; 43
     d92:	31 05       	cpc	r19, r1
     d94:	31 f0       	breq	.+12     	; 0xda2 <conv_int+0x34>
     d96:	2d 32       	cpi	r18, 0x2D	; 45
     d98:	31 05       	cpc	r19, r1
     d9a:	59 f4       	brne	.+22     	; 0xdb2 <conv_int+0x44>
     d9c:	8b 2d       	mov	r24, r11
     d9e:	80 68       	ori	r24, 0x80	; 128
     da0:	b8 2e       	mov	r11, r24
     da2:	d1 50       	subi	r29, 0x01	; 1
     da4:	11 f4       	brne	.+4      	; 0xdaa <conv_int+0x3c>
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	61 c0       	rjmp	.+194    	; 0xe6c <conv_int+0xfe>
     daa:	c8 01       	movw	r24, r16
     dac:	4b dd       	rcall	.-1386   	; 0x844 <fgetc>
     dae:	97 fd       	sbrc	r25, 7
     db0:	fa cf       	rjmp	.-12     	; 0xda6 <conv_int+0x38>
     db2:	cb 2d       	mov	r28, r11
     db4:	cd 7f       	andi	r28, 0xFD	; 253
     db6:	2b 2d       	mov	r18, r11
     db8:	20 73       	andi	r18, 0x30	; 48
     dba:	f9 f4       	brne	.+62     	; 0xdfa <conv_int+0x8c>
     dbc:	80 33       	cpi	r24, 0x30	; 48
     dbe:	e9 f4       	brne	.+58     	; 0xdfa <conv_int+0x8c>
     dc0:	aa 24       	eor	r10, r10
     dc2:	aa 94       	dec	r10
     dc4:	ad 0e       	add	r10, r29
     dc6:	09 f4       	brne	.+2      	; 0xdca <conv_int+0x5c>
     dc8:	3e c0       	rjmp	.+124    	; 0xe46 <conv_int+0xd8>
     dca:	c8 01       	movw	r24, r16
     dcc:	3b dd       	rcall	.-1418   	; 0x844 <fgetc>
     dce:	97 fd       	sbrc	r25, 7
     dd0:	3a c0       	rjmp	.+116    	; 0xe46 <conv_int+0xd8>
     dd2:	9c 01       	movw	r18, r24
     dd4:	2f 7d       	andi	r18, 0xDF	; 223
     dd6:	33 27       	eor	r19, r19
     dd8:	28 35       	cpi	r18, 0x58	; 88
     dda:	31 05       	cpc	r19, r1
     ddc:	41 f4       	brne	.+16     	; 0xdee <conv_int+0x80>
     dde:	c2 64       	ori	r28, 0x42	; 66
     de0:	d2 50       	subi	r29, 0x02	; 2
     de2:	89 f1       	breq	.+98     	; 0xe46 <conv_int+0xd8>
     de4:	c8 01       	movw	r24, r16
     de6:	2e dd       	rcall	.-1444   	; 0x844 <fgetc>
     de8:	97 ff       	sbrs	r25, 7
     dea:	07 c0       	rjmp	.+14     	; 0xdfa <conv_int+0x8c>
     dec:	2c c0       	rjmp	.+88     	; 0xe46 <conv_int+0xd8>
     dee:	b6 fe       	sbrs	r11, 6
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <conv_int+0x88>
     df2:	c2 60       	ori	r28, 0x02	; 2
     df4:	01 c0       	rjmp	.+2      	; 0xdf8 <conv_int+0x8a>
     df6:	c2 61       	ori	r28, 0x12	; 18
     df8:	da 2d       	mov	r29, r10
     dfa:	81 2c       	mov	r8, r1
     dfc:	91 2c       	mov	r9, r1
     dfe:	54 01       	movw	r10, r8
     e00:	20 ed       	ldi	r18, 0xD0	; 208
     e02:	28 0f       	add	r18, r24
     e04:	28 30       	cpi	r18, 0x08	; 8
     e06:	78 f0       	brcs	.+30     	; 0xe26 <conv_int+0xb8>
     e08:	c4 ff       	sbrs	r28, 4
     e0a:	03 c0       	rjmp	.+6      	; 0xe12 <conv_int+0xa4>
     e0c:	b8 01       	movw	r22, r16
     e0e:	59 d2       	rcall	.+1202   	; 0x12c2 <ungetc>
     e10:	17 c0       	rjmp	.+46     	; 0xe40 <conv_int+0xd2>
     e12:	2a 30       	cpi	r18, 0x0A	; 10
     e14:	40 f0       	brcs	.+16     	; 0xe26 <conv_int+0xb8>
     e16:	c6 ff       	sbrs	r28, 6
     e18:	f9 cf       	rjmp	.-14     	; 0xe0c <conv_int+0x9e>
     e1a:	2f 7d       	andi	r18, 0xDF	; 223
     e1c:	3f ee       	ldi	r19, 0xEF	; 239
     e1e:	32 0f       	add	r19, r18
     e20:	36 30       	cpi	r19, 0x06	; 6
     e22:	a0 f7       	brcc	.-24     	; 0xe0c <conv_int+0x9e>
     e24:	27 50       	subi	r18, 0x07	; 7
     e26:	4c 2f       	mov	r20, r28
     e28:	c5 01       	movw	r24, r10
     e2a:	b4 01       	movw	r22, r8
     e2c:	63 df       	rcall	.-314    	; 0xcf4 <mulacc>
     e2e:	4b 01       	movw	r8, r22
     e30:	5c 01       	movw	r10, r24
     e32:	c2 60       	ori	r28, 0x02	; 2
     e34:	d1 50       	subi	r29, 0x01	; 1
     e36:	51 f0       	breq	.+20     	; 0xe4c <conv_int+0xde>
     e38:	c8 01       	movw	r24, r16
     e3a:	04 dd       	rcall	.-1528   	; 0x844 <fgetc>
     e3c:	97 ff       	sbrs	r25, 7
     e3e:	e0 cf       	rjmp	.-64     	; 0xe00 <conv_int+0x92>
     e40:	c1 fd       	sbrc	r28, 1
     e42:	04 c0       	rjmp	.+8      	; 0xe4c <conv_int+0xde>
     e44:	b0 cf       	rjmp	.-160    	; 0xda6 <conv_int+0x38>
     e46:	81 2c       	mov	r8, r1
     e48:	91 2c       	mov	r9, r1
     e4a:	54 01       	movw	r10, r8
     e4c:	c7 ff       	sbrs	r28, 7
     e4e:	08 c0       	rjmp	.+16     	; 0xe60 <conv_int+0xf2>
     e50:	b0 94       	com	r11
     e52:	a0 94       	com	r10
     e54:	90 94       	com	r9
     e56:	80 94       	com	r8
     e58:	81 1c       	adc	r8, r1
     e5a:	91 1c       	adc	r9, r1
     e5c:	a1 1c       	adc	r10, r1
     e5e:	b1 1c       	adc	r11, r1
     e60:	2c 2f       	mov	r18, r28
     e62:	b5 01       	movw	r22, r10
     e64:	a4 01       	movw	r20, r8
     e66:	c7 01       	movw	r24, r14
     e68:	39 df       	rcall	.-398    	; 0xcdc <putval>
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	df 91       	pop	r29
     e6e:	cf 91       	pop	r28
     e70:	1f 91       	pop	r17
     e72:	0f 91       	pop	r16
     e74:	ff 90       	pop	r15
     e76:	ef 90       	pop	r14
     e78:	bf 90       	pop	r11
     e7a:	af 90       	pop	r10
     e7c:	9f 90       	pop	r9
     e7e:	8f 90       	pop	r8
     e80:	08 95       	ret

00000e82 <conv_brk>:
     e82:	a0 e2       	ldi	r26, 0x20	; 32
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e6 e4       	ldi	r30, 0x46	; 70
     e88:	f7 e0       	ldi	r31, 0x07	; 7
     e8a:	98 c2       	rjmp	.+1328   	; 0x13bc <__prologue_saves__+0x6>
     e8c:	5c 01       	movw	r10, r24
     e8e:	96 2e       	mov	r9, r22
     e90:	7a 01       	movw	r14, r20
     e92:	f9 01       	movw	r30, r18
     e94:	8e 01       	movw	r16, r28
     e96:	0f 5f       	subi	r16, 0xFF	; 255
     e98:	1f 4f       	sbci	r17, 0xFF	; 255
     e9a:	68 01       	movw	r12, r16
     e9c:	80 e2       	ldi	r24, 0x20	; 32
     e9e:	d8 01       	movw	r26, r16
     ea0:	1d 92       	st	X+, r1
     ea2:	8a 95       	dec	r24
     ea4:	e9 f7       	brne	.-6      	; 0xea0 <conv_brk+0x1e>
     ea6:	d5 01       	movw	r26, r10
     ea8:	13 96       	adiw	r26, 0x03	; 3
     eaa:	8c 90       	ld	r8, X
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	61 2c       	mov	r6, r1
     eb2:	71 2c       	mov	r7, r1
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	61 e0       	ldi	r22, 0x01	; 1
     eb8:	70 e0       	ldi	r23, 0x00	; 0
     eba:	83 fc       	sbrc	r8, 3
     ebc:	25 91       	lpm	r18, Z+
     ebe:	83 fe       	sbrs	r8, 3
     ec0:	21 91       	ld	r18, Z+
     ec2:	8f 01       	movw	r16, r30
     ec4:	52 2e       	mov	r5, r18
     ec6:	21 11       	cpse	r18, r1
     ec8:	03 c0       	rjmp	.+6      	; 0xed0 <conv_brk+0x4e>
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	90 c0       	rjmp	.+288    	; 0xff0 <conv_brk+0x16e>
     ed0:	2e 35       	cpi	r18, 0x5E	; 94
     ed2:	11 f4       	brne	.+4      	; 0xed8 <conv_brk+0x56>
     ed4:	00 97       	sbiw	r24, 0x00	; 0
     ed6:	51 f1       	breq	.+84     	; 0xf2c <conv_brk+0xaa>
     ed8:	43 2f       	mov	r20, r19
     eda:	50 e0       	ldi	r21, 0x00	; 0
     edc:	48 17       	cp	r20, r24
     ede:	59 07       	cpc	r21, r25
     ee0:	3c f4       	brge	.+14     	; 0xef0 <conv_brk+0x6e>
     ee2:	2d 35       	cpi	r18, 0x5D	; 93
     ee4:	59 f1       	breq	.+86     	; 0xf3c <conv_brk+0xba>
     ee6:	2d 32       	cpi	r18, 0x2D	; 45
     ee8:	19 f4       	brne	.+6      	; 0xef0 <conv_brk+0x6e>
     eea:	77 20       	and	r7, r7
     eec:	09 f1       	breq	.+66     	; 0xf30 <conv_brk+0xae>
     eee:	03 c0       	rjmp	.+6      	; 0xef6 <conv_brk+0x74>
     ef0:	77 20       	and	r7, r7
     ef2:	09 f4       	brne	.+2      	; 0xef6 <conv_brk+0x74>
     ef4:	68 c0       	rjmp	.+208    	; 0xfc6 <conv_brk+0x144>
     ef6:	45 2d       	mov	r20, r5
     ef8:	46 95       	lsr	r20
     efa:	46 95       	lsr	r20
     efc:	46 95       	lsr	r20
     efe:	d6 01       	movw	r26, r12
     f00:	a4 0f       	add	r26, r20
     f02:	b1 1d       	adc	r27, r1
     f04:	45 2d       	mov	r20, r5
     f06:	47 70       	andi	r20, 0x07	; 7
     f08:	8b 01       	movw	r16, r22
     f0a:	02 c0       	rjmp	.+4      	; 0xf10 <conv_brk+0x8e>
     f0c:	00 0f       	add	r16, r16
     f0e:	11 1f       	adc	r17, r17
     f10:	4a 95       	dec	r20
     f12:	e2 f7       	brpl	.-8      	; 0xf0c <conv_brk+0x8a>
     f14:	a8 01       	movw	r20, r16
     f16:	5c 91       	ld	r21, X
     f18:	45 2b       	or	r20, r21
     f1a:	4c 93       	st	X, r20
     f1c:	65 14       	cp	r6, r5
     f1e:	59 f0       	breq	.+22     	; 0xf36 <conv_brk+0xb4>
     f20:	56 14       	cp	r5, r6
     f22:	10 f4       	brcc	.+4      	; 0xf28 <conv_brk+0xa6>
     f24:	53 94       	inc	r5
     f26:	e7 cf       	rjmp	.-50     	; 0xef6 <conv_brk+0x74>
     f28:	5a 94       	dec	r5
     f2a:	e5 cf       	rjmp	.-54     	; 0xef6 <conv_brk+0x74>
     f2c:	31 e0       	ldi	r19, 0x01	; 1
     f2e:	04 c0       	rjmp	.+8      	; 0xf38 <conv_brk+0xb6>
     f30:	77 24       	eor	r7, r7
     f32:	73 94       	inc	r7
     f34:	01 c0       	rjmp	.+2      	; 0xf38 <conv_brk+0xb6>
     f36:	71 2c       	mov	r7, r1
     f38:	01 96       	adiw	r24, 0x01	; 1
     f3a:	bf cf       	rjmp	.-130    	; 0xeba <conv_brk+0x38>
     f3c:	77 20       	and	r7, r7
     f3e:	19 f0       	breq	.+6      	; 0xf46 <conv_brk+0xc4>
     f40:	8e 81       	ldd	r24, Y+6	; 0x06
     f42:	80 62       	ori	r24, 0x20	; 32
     f44:	8e 83       	std	Y+6, r24	; 0x06
     f46:	31 11       	cpse	r19, r1
     f48:	03 c0       	rjmp	.+6      	; 0xf50 <conv_brk+0xce>
     f4a:	88 24       	eor	r8, r8
     f4c:	83 94       	inc	r8
     f4e:	17 c0       	rjmp	.+46     	; 0xf7e <conv_brk+0xfc>
     f50:	f6 01       	movw	r30, r12
     f52:	9e 01       	movw	r18, r28
     f54:	2f 5d       	subi	r18, 0xDF	; 223
     f56:	3f 4f       	sbci	r19, 0xFF	; 255
     f58:	80 81       	ld	r24, Z
     f5a:	80 95       	com	r24
     f5c:	81 93       	st	Z+, r24
     f5e:	2e 17       	cp	r18, r30
     f60:	3f 07       	cpc	r19, r31
     f62:	d1 f7       	brne	.-12     	; 0xf58 <conv_brk+0xd6>
     f64:	f2 cf       	rjmp	.-28     	; 0xf4a <conv_brk+0xc8>
     f66:	e1 14       	cp	r14, r1
     f68:	f1 04       	cpc	r15, r1
     f6a:	29 f0       	breq	.+10     	; 0xf76 <conv_brk+0xf4>
     f6c:	d7 01       	movw	r26, r14
     f6e:	8c 93       	st	X, r24
     f70:	f7 01       	movw	r30, r14
     f72:	31 96       	adiw	r30, 0x01	; 1
     f74:	7f 01       	movw	r14, r30
     f76:	9a 94       	dec	r9
     f78:	81 2c       	mov	r8, r1
     f7a:	99 20       	and	r9, r9
     f7c:	e9 f0       	breq	.+58     	; 0xfb8 <conv_brk+0x136>
     f7e:	c5 01       	movw	r24, r10
     f80:	61 dc       	rcall	.-1854   	; 0x844 <fgetc>
     f82:	97 fd       	sbrc	r25, 7
     f84:	17 c0       	rjmp	.+46     	; 0xfb4 <conv_brk+0x132>
     f86:	fc 01       	movw	r30, r24
     f88:	ff 27       	eor	r31, r31
     f8a:	23 e0       	ldi	r18, 0x03	; 3
     f8c:	f5 95       	asr	r31
     f8e:	e7 95       	ror	r30
     f90:	2a 95       	dec	r18
     f92:	e1 f7       	brne	.-8      	; 0xf8c <conv_brk+0x10a>
     f94:	ec 0d       	add	r30, r12
     f96:	fd 1d       	adc	r31, r13
     f98:	20 81       	ld	r18, Z
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	ac 01       	movw	r20, r24
     f9e:	47 70       	andi	r20, 0x07	; 7
     fa0:	55 27       	eor	r21, r21
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <conv_brk+0x126>
     fa4:	35 95       	asr	r19
     fa6:	27 95       	ror	r18
     fa8:	4a 95       	dec	r20
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <conv_brk+0x122>
     fac:	20 fd       	sbrc	r18, 0
     fae:	db cf       	rjmp	.-74     	; 0xf66 <conv_brk+0xe4>
     fb0:	b5 01       	movw	r22, r10
     fb2:	87 d1       	rcall	.+782    	; 0x12c2 <ungetc>
     fb4:	81 10       	cpse	r8, r1
     fb6:	89 cf       	rjmp	.-238    	; 0xeca <conv_brk+0x48>
     fb8:	e1 14       	cp	r14, r1
     fba:	f1 04       	cpc	r15, r1
     fbc:	11 f0       	breq	.+4      	; 0xfc2 <conv_brk+0x140>
     fbe:	d7 01       	movw	r26, r14
     fc0:	1c 92       	st	X, r1
     fc2:	c8 01       	movw	r24, r16
     fc4:	15 c0       	rjmp	.+42     	; 0xff0 <conv_brk+0x16e>
     fc6:	42 2f       	mov	r20, r18
     fc8:	46 95       	lsr	r20
     fca:	46 95       	lsr	r20
     fcc:	46 95       	lsr	r20
     fce:	d6 01       	movw	r26, r12
     fd0:	a4 0f       	add	r26, r20
     fd2:	b1 1d       	adc	r27, r1
     fd4:	42 2f       	mov	r20, r18
     fd6:	47 70       	andi	r20, 0x07	; 7
     fd8:	8b 01       	movw	r16, r22
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <conv_brk+0x15e>
     fdc:	00 0f       	add	r16, r16
     fde:	11 1f       	adc	r17, r17
     fe0:	4a 95       	dec	r20
     fe2:	e2 f7       	brpl	.-8      	; 0xfdc <conv_brk+0x15a>
     fe4:	a8 01       	movw	r20, r16
     fe6:	5c 91       	ld	r21, X
     fe8:	45 2b       	or	r20, r21
     fea:	4c 93       	st	X, r20
     fec:	62 2e       	mov	r6, r18
     fee:	a4 cf       	rjmp	.-184    	; 0xf38 <conv_brk+0xb6>
     ff0:	a0 96       	adiw	r28, 0x20	; 32
     ff2:	ef e0       	ldi	r30, 0x0F	; 15
     ff4:	ff c1       	rjmp	.+1022   	; 0x13f4 <__epilogue_restores__+0x6>

00000ff6 <vfscanf>:
     ff6:	a0 e0       	ldi	r26, 0x00	; 0
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e0 e0       	ldi	r30, 0x00	; 0
     ffc:	f8 e0       	ldi	r31, 0x08	; 8
     ffe:	de c1       	rjmp	.+956    	; 0x13bc <__prologue_saves__+0x6>
    1000:	6c 01       	movw	r12, r24
    1002:	eb 01       	movw	r28, r22
    1004:	5a 01       	movw	r10, r20
    1006:	fc 01       	movw	r30, r24
    1008:	17 82       	std	Z+7, r1	; 0x07
    100a:	16 82       	std	Z+6, r1	; 0x06
    100c:	51 2c       	mov	r5, r1
    100e:	f6 01       	movw	r30, r12
    1010:	e3 80       	ldd	r14, Z+3	; 0x03
    1012:	fe 01       	movw	r30, r28
    1014:	e3 fc       	sbrc	r14, 3
    1016:	85 91       	lpm	r24, Z+
    1018:	e3 fe       	sbrs	r14, 3
    101a:	81 91       	ld	r24, Z+
    101c:	18 2f       	mov	r17, r24
    101e:	ef 01       	movw	r28, r30
    1020:	88 23       	and	r24, r24
    1022:	09 f4       	brne	.+2      	; 0x1026 <vfscanf+0x30>
    1024:	e0 c0       	rjmp	.+448    	; 0x11e6 <vfscanf+0x1f0>
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	e7 d0       	rcall	.+462    	; 0x11f8 <isspace>
    102a:	89 2b       	or	r24, r25
    102c:	19 f0       	breq	.+6      	; 0x1034 <vfscanf+0x3e>
    102e:	c6 01       	movw	r24, r12
    1030:	88 de       	rcall	.-752    	; 0xd42 <skip_spaces>
    1032:	ed cf       	rjmp	.-38     	; 0x100e <vfscanf+0x18>
    1034:	15 32       	cpi	r17, 0x25	; 37
    1036:	41 f4       	brne	.+16     	; 0x1048 <vfscanf+0x52>
    1038:	fe 01       	movw	r30, r28
    103a:	e3 fc       	sbrc	r14, 3
    103c:	15 91       	lpm	r17, Z+
    103e:	e3 fe       	sbrs	r14, 3
    1040:	11 91       	ld	r17, Z+
    1042:	ef 01       	movw	r28, r30
    1044:	15 32       	cpi	r17, 0x25	; 37
    1046:	71 f4       	brne	.+28     	; 0x1064 <vfscanf+0x6e>
    1048:	c6 01       	movw	r24, r12
    104a:	fc db       	rcall	.-2056   	; 0x844 <fgetc>
    104c:	97 fd       	sbrc	r25, 7
    104e:	c9 c0       	rjmp	.+402    	; 0x11e2 <vfscanf+0x1ec>
    1050:	41 2f       	mov	r20, r17
    1052:	50 e0       	ldi	r21, 0x00	; 0
    1054:	9c 01       	movw	r18, r24
    1056:	33 27       	eor	r19, r19
    1058:	24 17       	cp	r18, r20
    105a:	35 07       	cpc	r19, r21
    105c:	c1 f2       	breq	.-80     	; 0x100e <vfscanf+0x18>
    105e:	b6 01       	movw	r22, r12
    1060:	30 d1       	rcall	.+608    	; 0x12c2 <ungetc>
    1062:	c1 c0       	rjmp	.+386    	; 0x11e6 <vfscanf+0x1f0>
    1064:	1a 32       	cpi	r17, 0x2A	; 42
    1066:	39 f4       	brne	.+14     	; 0x1076 <vfscanf+0x80>
    1068:	e3 fc       	sbrc	r14, 3
    106a:	15 91       	lpm	r17, Z+
    106c:	e3 fe       	sbrs	r14, 3
    106e:	11 91       	ld	r17, Z+
    1070:	ef 01       	movw	r28, r30
    1072:	01 e0       	ldi	r16, 0x01	; 1
    1074:	01 c0       	rjmp	.+2      	; 0x1078 <vfscanf+0x82>
    1076:	00 e0       	ldi	r16, 0x00	; 0
    1078:	f1 2c       	mov	r15, r1
    107a:	20 ed       	ldi	r18, 0xD0	; 208
    107c:	21 0f       	add	r18, r17
    107e:	2a 30       	cpi	r18, 0x0A	; 10
    1080:	78 f4       	brcc	.+30     	; 0x10a0 <vfscanf+0xaa>
    1082:	02 60       	ori	r16, 0x02	; 2
    1084:	6f 2d       	mov	r22, r15
    1086:	70 e0       	ldi	r23, 0x00	; 0
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	40 e2       	ldi	r20, 0x20	; 32
    108e:	32 de       	rcall	.-924    	; 0xcf4 <mulacc>
    1090:	f6 2e       	mov	r15, r22
    1092:	fe 01       	movw	r30, r28
    1094:	e3 fc       	sbrc	r14, 3
    1096:	15 91       	lpm	r17, Z+
    1098:	e3 fe       	sbrs	r14, 3
    109a:	11 91       	ld	r17, Z+
    109c:	ef 01       	movw	r28, r30
    109e:	ed cf       	rjmp	.-38     	; 0x107a <vfscanf+0x84>
    10a0:	01 ff       	sbrs	r16, 1
    10a2:	03 c0       	rjmp	.+6      	; 0x10aa <vfscanf+0xb4>
    10a4:	f1 10       	cpse	r15, r1
    10a6:	03 c0       	rjmp	.+6      	; 0x10ae <vfscanf+0xb8>
    10a8:	9e c0       	rjmp	.+316    	; 0x11e6 <vfscanf+0x1f0>
    10aa:	ff 24       	eor	r15, r15
    10ac:	fa 94       	dec	r15
    10ae:	18 36       	cpi	r17, 0x68	; 104
    10b0:	19 f0       	breq	.+6      	; 0x10b8 <vfscanf+0xc2>
    10b2:	1c 36       	cpi	r17, 0x6C	; 108
    10b4:	51 f0       	breq	.+20     	; 0x10ca <vfscanf+0xd4>
    10b6:	10 c0       	rjmp	.+32     	; 0x10d8 <vfscanf+0xe2>
    10b8:	fe 01       	movw	r30, r28
    10ba:	e3 fc       	sbrc	r14, 3
    10bc:	15 91       	lpm	r17, Z+
    10be:	e3 fe       	sbrs	r14, 3
    10c0:	11 91       	ld	r17, Z+
    10c2:	ef 01       	movw	r28, r30
    10c4:	18 36       	cpi	r17, 0x68	; 104
    10c6:	41 f4       	brne	.+16     	; 0x10d8 <vfscanf+0xe2>
    10c8:	08 60       	ori	r16, 0x08	; 8
    10ca:	04 60       	ori	r16, 0x04	; 4
    10cc:	fe 01       	movw	r30, r28
    10ce:	e3 fc       	sbrc	r14, 3
    10d0:	15 91       	lpm	r17, Z+
    10d2:	e3 fe       	sbrs	r14, 3
    10d4:	11 91       	ld	r17, Z+
    10d6:	ef 01       	movw	r28, r30
    10d8:	11 23       	and	r17, r17
    10da:	09 f4       	brne	.+2      	; 0x10de <vfscanf+0xe8>
    10dc:	84 c0       	rjmp	.+264    	; 0x11e6 <vfscanf+0x1f0>
    10de:	61 2f       	mov	r22, r17
    10e0:	70 e0       	ldi	r23, 0x00	; 0
    10e2:	88 e6       	ldi	r24, 0x68	; 104
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	90 d0       	rcall	.+288    	; 0x1208 <strchr_P>
    10e8:	89 2b       	or	r24, r25
    10ea:	09 f4       	brne	.+2      	; 0x10ee <vfscanf+0xf8>
    10ec:	7c c0       	rjmp	.+248    	; 0x11e6 <vfscanf+0x1f0>
    10ee:	00 fd       	sbrc	r16, 0
    10f0:	07 c0       	rjmp	.+14     	; 0x1100 <vfscanf+0x10a>
    10f2:	f5 01       	movw	r30, r10
    10f4:	80 80       	ld	r8, Z
    10f6:	91 80       	ldd	r9, Z+1	; 0x01
    10f8:	c5 01       	movw	r24, r10
    10fa:	02 96       	adiw	r24, 0x02	; 2
    10fc:	5c 01       	movw	r10, r24
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <vfscanf+0x10e>
    1100:	81 2c       	mov	r8, r1
    1102:	91 2c       	mov	r9, r1
    1104:	1e 36       	cpi	r17, 0x6E	; 110
    1106:	49 f4       	brne	.+18     	; 0x111a <vfscanf+0x124>
    1108:	f6 01       	movw	r30, r12
    110a:	46 81       	ldd	r20, Z+6	; 0x06
    110c:	57 81       	ldd	r21, Z+7	; 0x07
    110e:	60 e0       	ldi	r22, 0x00	; 0
    1110:	70 e0       	ldi	r23, 0x00	; 0
    1112:	20 2f       	mov	r18, r16
    1114:	c4 01       	movw	r24, r8
    1116:	e2 dd       	rcall	.-1084   	; 0xcdc <putval>
    1118:	7a cf       	rjmp	.-268    	; 0x100e <vfscanf+0x18>
    111a:	13 36       	cpi	r17, 0x63	; 99
    111c:	a1 f4       	brne	.+40     	; 0x1146 <vfscanf+0x150>
    111e:	01 fd       	sbrc	r16, 1
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <vfscanf+0x130>
    1122:	ff 24       	eor	r15, r15
    1124:	f3 94       	inc	r15
    1126:	c6 01       	movw	r24, r12
    1128:	8d db       	rcall	.-2278   	; 0x844 <fgetc>
    112a:	97 fd       	sbrc	r25, 7
    112c:	5a c0       	rjmp	.+180    	; 0x11e2 <vfscanf+0x1ec>
    112e:	81 14       	cp	r8, r1
    1130:	91 04       	cpc	r9, r1
    1132:	29 f0       	breq	.+10     	; 0x113e <vfscanf+0x148>
    1134:	f4 01       	movw	r30, r8
    1136:	80 83       	st	Z, r24
    1138:	c4 01       	movw	r24, r8
    113a:	01 96       	adiw	r24, 0x01	; 1
    113c:	4c 01       	movw	r8, r24
    113e:	fa 94       	dec	r15
    1140:	f1 10       	cpse	r15, r1
    1142:	f1 cf       	rjmp	.-30     	; 0x1126 <vfscanf+0x130>
    1144:	4a c0       	rjmp	.+148    	; 0x11da <vfscanf+0x1e4>
    1146:	1b 35       	cpi	r17, 0x5B	; 91
    1148:	51 f4       	brne	.+20     	; 0x115e <vfscanf+0x168>
    114a:	9e 01       	movw	r18, r28
    114c:	a4 01       	movw	r20, r8
    114e:	6f 2d       	mov	r22, r15
    1150:	c6 01       	movw	r24, r12
    1152:	97 de       	rcall	.-722    	; 0xe82 <conv_brk>
    1154:	ec 01       	movw	r28, r24
    1156:	89 2b       	or	r24, r25
    1158:	09 f0       	breq	.+2      	; 0x115c <vfscanf+0x166>
    115a:	3f c0       	rjmp	.+126    	; 0x11da <vfscanf+0x1e4>
    115c:	39 c0       	rjmp	.+114    	; 0x11d0 <vfscanf+0x1da>
    115e:	c6 01       	movw	r24, r12
    1160:	f0 dd       	rcall	.-1056   	; 0xd42 <skip_spaces>
    1162:	97 fd       	sbrc	r25, 7
    1164:	3e c0       	rjmp	.+124    	; 0x11e2 <vfscanf+0x1ec>
    1166:	1f 36       	cpi	r17, 0x6F	; 111
    1168:	49 f1       	breq	.+82     	; 0x11bc <vfscanf+0x1c6>
    116a:	28 f4       	brcc	.+10     	; 0x1176 <vfscanf+0x180>
    116c:	14 36       	cpi	r17, 0x64	; 100
    116e:	21 f1       	breq	.+72     	; 0x11b8 <vfscanf+0x1c2>
    1170:	19 36       	cpi	r17, 0x69	; 105
    1172:	39 f1       	breq	.+78     	; 0x11c2 <vfscanf+0x1cc>
    1174:	25 c0       	rjmp	.+74     	; 0x11c0 <vfscanf+0x1ca>
    1176:	13 37       	cpi	r17, 0x73	; 115
    1178:	71 f0       	breq	.+28     	; 0x1196 <vfscanf+0x1a0>
    117a:	15 37       	cpi	r17, 0x75	; 117
    117c:	e9 f0       	breq	.+58     	; 0x11b8 <vfscanf+0x1c2>
    117e:	20 c0       	rjmp	.+64     	; 0x11c0 <vfscanf+0x1ca>
    1180:	81 14       	cp	r8, r1
    1182:	91 04       	cpc	r9, r1
    1184:	29 f0       	breq	.+10     	; 0x1190 <vfscanf+0x19a>
    1186:	f4 01       	movw	r30, r8
    1188:	60 82       	st	Z, r6
    118a:	c4 01       	movw	r24, r8
    118c:	01 96       	adiw	r24, 0x01	; 1
    118e:	4c 01       	movw	r8, r24
    1190:	fa 94       	dec	r15
    1192:	ff 20       	and	r15, r15
    1194:	59 f0       	breq	.+22     	; 0x11ac <vfscanf+0x1b6>
    1196:	c6 01       	movw	r24, r12
    1198:	55 db       	rcall	.-2390   	; 0x844 <fgetc>
    119a:	3c 01       	movw	r6, r24
    119c:	97 fd       	sbrc	r25, 7
    119e:	06 c0       	rjmp	.+12     	; 0x11ac <vfscanf+0x1b6>
    11a0:	2b d0       	rcall	.+86     	; 0x11f8 <isspace>
    11a2:	89 2b       	or	r24, r25
    11a4:	69 f3       	breq	.-38     	; 0x1180 <vfscanf+0x18a>
    11a6:	b6 01       	movw	r22, r12
    11a8:	c3 01       	movw	r24, r6
    11aa:	8b d0       	rcall	.+278    	; 0x12c2 <ungetc>
    11ac:	81 14       	cp	r8, r1
    11ae:	91 04       	cpc	r9, r1
    11b0:	a1 f0       	breq	.+40     	; 0x11da <vfscanf+0x1e4>
    11b2:	f4 01       	movw	r30, r8
    11b4:	10 82       	st	Z, r1
    11b6:	11 c0       	rjmp	.+34     	; 0x11da <vfscanf+0x1e4>
    11b8:	00 62       	ori	r16, 0x20	; 32
    11ba:	03 c0       	rjmp	.+6      	; 0x11c2 <vfscanf+0x1cc>
    11bc:	00 61       	ori	r16, 0x10	; 16
    11be:	01 c0       	rjmp	.+2      	; 0x11c2 <vfscanf+0x1cc>
    11c0:	00 64       	ori	r16, 0x40	; 64
    11c2:	20 2f       	mov	r18, r16
    11c4:	a4 01       	movw	r20, r8
    11c6:	6f 2d       	mov	r22, r15
    11c8:	c6 01       	movw	r24, r12
    11ca:	d1 dd       	rcall	.-1118   	; 0xd6e <conv_int>
    11cc:	81 11       	cpse	r24, r1
    11ce:	05 c0       	rjmp	.+10     	; 0x11da <vfscanf+0x1e4>
    11d0:	f6 01       	movw	r30, r12
    11d2:	83 81       	ldd	r24, Z+3	; 0x03
    11d4:	80 73       	andi	r24, 0x30	; 48
    11d6:	29 f4       	brne	.+10     	; 0x11e2 <vfscanf+0x1ec>
    11d8:	06 c0       	rjmp	.+12     	; 0x11e6 <vfscanf+0x1f0>
    11da:	00 fd       	sbrc	r16, 0
    11dc:	18 cf       	rjmp	.-464    	; 0x100e <vfscanf+0x18>
    11de:	53 94       	inc	r5
    11e0:	16 cf       	rjmp	.-468    	; 0x100e <vfscanf+0x18>
    11e2:	55 20       	and	r5, r5
    11e4:	19 f0       	breq	.+6      	; 0x11ec <vfscanf+0x1f6>
    11e6:	85 2d       	mov	r24, r5
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <vfscanf+0x1fa>
    11ec:	8f ef       	ldi	r24, 0xFF	; 255
    11ee:	9f ef       	ldi	r25, 0xFF	; 255
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62
    11f4:	ef e0       	ldi	r30, 0x0F	; 15
    11f6:	fe c0       	rjmp	.+508    	; 0x13f4 <__epilogue_restores__+0x6>

000011f8 <isspace>:
    11f8:	91 11       	cpse	r25, r1
    11fa:	da c0       	rjmp	.+436    	; 0x13b0 <__ctype_isfalse>
    11fc:	80 32       	cpi	r24, 0x20	; 32
    11fe:	19 f0       	breq	.+6      	; 0x1206 <isspace+0xe>
    1200:	89 50       	subi	r24, 0x09	; 9
    1202:	85 50       	subi	r24, 0x05	; 5
    1204:	d0 f7       	brcc	.-12     	; 0x11fa <isspace+0x2>
    1206:	08 95       	ret

00001208 <strchr_P>:
    1208:	fc 01       	movw	r30, r24
    120a:	05 90       	lpm	r0, Z+
    120c:	06 16       	cp	r0, r22
    120e:	21 f0       	breq	.+8      	; 0x1218 <strchr_P+0x10>
    1210:	00 20       	and	r0, r0
    1212:	d9 f7       	brne	.-10     	; 0x120a <strchr_P+0x2>
    1214:	c0 01       	movw	r24, r0
    1216:	08 95       	ret
    1218:	31 97       	sbiw	r30, 0x01	; 1
    121a:	cf 01       	movw	r24, r30
    121c:	08 95       	ret

0000121e <strnlen_P>:
    121e:	fc 01       	movw	r30, r24
    1220:	05 90       	lpm	r0, Z+
    1222:	61 50       	subi	r22, 0x01	; 1
    1224:	70 40       	sbci	r23, 0x00	; 0
    1226:	01 10       	cpse	r0, r1
    1228:	d8 f7       	brcc	.-10     	; 0x1220 <strnlen_P+0x2>
    122a:	80 95       	com	r24
    122c:	90 95       	com	r25
    122e:	8e 0f       	add	r24, r30
    1230:	9f 1f       	adc	r25, r31
    1232:	08 95       	ret

00001234 <strnlen>:
    1234:	fc 01       	movw	r30, r24
    1236:	61 50       	subi	r22, 0x01	; 1
    1238:	70 40       	sbci	r23, 0x00	; 0
    123a:	01 90       	ld	r0, Z+
    123c:	01 10       	cpse	r0, r1
    123e:	d8 f7       	brcc	.-10     	; 0x1236 <strnlen+0x2>
    1240:	80 95       	com	r24
    1242:	90 95       	com	r25
    1244:	8e 0f       	add	r24, r30
    1246:	9f 1f       	adc	r25, r31
    1248:	08 95       	ret

0000124a <fputc>:
    124a:	0f 93       	push	r16
    124c:	1f 93       	push	r17
    124e:	cf 93       	push	r28
    1250:	df 93       	push	r29
    1252:	fb 01       	movw	r30, r22
    1254:	23 81       	ldd	r18, Z+3	; 0x03
    1256:	21 fd       	sbrc	r18, 1
    1258:	03 c0       	rjmp	.+6      	; 0x1260 <fputc+0x16>
    125a:	8f ef       	ldi	r24, 0xFF	; 255
    125c:	9f ef       	ldi	r25, 0xFF	; 255
    125e:	2c c0       	rjmp	.+88     	; 0x12b8 <fputc+0x6e>
    1260:	22 ff       	sbrs	r18, 2
    1262:	16 c0       	rjmp	.+44     	; 0x1290 <fputc+0x46>
    1264:	46 81       	ldd	r20, Z+6	; 0x06
    1266:	57 81       	ldd	r21, Z+7	; 0x07
    1268:	24 81       	ldd	r18, Z+4	; 0x04
    126a:	35 81       	ldd	r19, Z+5	; 0x05
    126c:	42 17       	cp	r20, r18
    126e:	53 07       	cpc	r21, r19
    1270:	44 f4       	brge	.+16     	; 0x1282 <fputc+0x38>
    1272:	a0 81       	ld	r26, Z
    1274:	b1 81       	ldd	r27, Z+1	; 0x01
    1276:	9d 01       	movw	r18, r26
    1278:	2f 5f       	subi	r18, 0xFF	; 255
    127a:	3f 4f       	sbci	r19, 0xFF	; 255
    127c:	31 83       	std	Z+1, r19	; 0x01
    127e:	20 83       	st	Z, r18
    1280:	8c 93       	st	X, r24
    1282:	26 81       	ldd	r18, Z+6	; 0x06
    1284:	37 81       	ldd	r19, Z+7	; 0x07
    1286:	2f 5f       	subi	r18, 0xFF	; 255
    1288:	3f 4f       	sbci	r19, 0xFF	; 255
    128a:	37 83       	std	Z+7, r19	; 0x07
    128c:	26 83       	std	Z+6, r18	; 0x06
    128e:	14 c0       	rjmp	.+40     	; 0x12b8 <fputc+0x6e>
    1290:	8b 01       	movw	r16, r22
    1292:	ec 01       	movw	r28, r24
    1294:	fb 01       	movw	r30, r22
    1296:	00 84       	ldd	r0, Z+8	; 0x08
    1298:	f1 85       	ldd	r31, Z+9	; 0x09
    129a:	e0 2d       	mov	r30, r0
    129c:	09 95       	icall
    129e:	89 2b       	or	r24, r25
    12a0:	e1 f6       	brne	.-72     	; 0x125a <fputc+0x10>
    12a2:	d8 01       	movw	r26, r16
    12a4:	16 96       	adiw	r26, 0x06	; 6
    12a6:	8d 91       	ld	r24, X+
    12a8:	9c 91       	ld	r25, X
    12aa:	17 97       	sbiw	r26, 0x07	; 7
    12ac:	01 96       	adiw	r24, 0x01	; 1
    12ae:	17 96       	adiw	r26, 0x07	; 7
    12b0:	9c 93       	st	X, r25
    12b2:	8e 93       	st	-X, r24
    12b4:	16 97       	sbiw	r26, 0x06	; 6
    12b6:	ce 01       	movw	r24, r28
    12b8:	df 91       	pop	r29
    12ba:	cf 91       	pop	r28
    12bc:	1f 91       	pop	r17
    12be:	0f 91       	pop	r16
    12c0:	08 95       	ret

000012c2 <ungetc>:
    12c2:	fb 01       	movw	r30, r22
    12c4:	23 81       	ldd	r18, Z+3	; 0x03
    12c6:	20 ff       	sbrs	r18, 0
    12c8:	12 c0       	rjmp	.+36     	; 0x12ee <ungetc+0x2c>
    12ca:	26 fd       	sbrc	r18, 6
    12cc:	10 c0       	rjmp	.+32     	; 0x12ee <ungetc+0x2c>
    12ce:	8f 3f       	cpi	r24, 0xFF	; 255
    12d0:	3f ef       	ldi	r19, 0xFF	; 255
    12d2:	93 07       	cpc	r25, r19
    12d4:	61 f0       	breq	.+24     	; 0x12ee <ungetc+0x2c>
    12d6:	82 83       	std	Z+2, r24	; 0x02
    12d8:	2f 7d       	andi	r18, 0xDF	; 223
    12da:	20 64       	ori	r18, 0x40	; 64
    12dc:	23 83       	std	Z+3, r18	; 0x03
    12de:	26 81       	ldd	r18, Z+6	; 0x06
    12e0:	37 81       	ldd	r19, Z+7	; 0x07
    12e2:	21 50       	subi	r18, 0x01	; 1
    12e4:	31 09       	sbc	r19, r1
    12e6:	37 83       	std	Z+7, r19	; 0x07
    12e8:	26 83       	std	Z+6, r18	; 0x06
    12ea:	99 27       	eor	r25, r25
    12ec:	08 95       	ret
    12ee:	8f ef       	ldi	r24, 0xFF	; 255
    12f0:	9f ef       	ldi	r25, 0xFF	; 255
    12f2:	08 95       	ret

000012f4 <__ultoa_invert>:
    12f4:	fa 01       	movw	r30, r20
    12f6:	aa 27       	eor	r26, r26
    12f8:	28 30       	cpi	r18, 0x08	; 8
    12fa:	51 f1       	breq	.+84     	; 0x1350 <__ultoa_invert+0x5c>
    12fc:	20 31       	cpi	r18, 0x10	; 16
    12fe:	81 f1       	breq	.+96     	; 0x1360 <__ultoa_invert+0x6c>
    1300:	e8 94       	clt
    1302:	6f 93       	push	r22
    1304:	6e 7f       	andi	r22, 0xFE	; 254
    1306:	6e 5f       	subi	r22, 0xFE	; 254
    1308:	7f 4f       	sbci	r23, 0xFF	; 255
    130a:	8f 4f       	sbci	r24, 0xFF	; 255
    130c:	9f 4f       	sbci	r25, 0xFF	; 255
    130e:	af 4f       	sbci	r26, 0xFF	; 255
    1310:	b1 e0       	ldi	r27, 0x01	; 1
    1312:	3e d0       	rcall	.+124    	; 0x1390 <__ultoa_invert+0x9c>
    1314:	b4 e0       	ldi	r27, 0x04	; 4
    1316:	3c d0       	rcall	.+120    	; 0x1390 <__ultoa_invert+0x9c>
    1318:	67 0f       	add	r22, r23
    131a:	78 1f       	adc	r23, r24
    131c:	89 1f       	adc	r24, r25
    131e:	9a 1f       	adc	r25, r26
    1320:	a1 1d       	adc	r26, r1
    1322:	68 0f       	add	r22, r24
    1324:	79 1f       	adc	r23, r25
    1326:	8a 1f       	adc	r24, r26
    1328:	91 1d       	adc	r25, r1
    132a:	a1 1d       	adc	r26, r1
    132c:	6a 0f       	add	r22, r26
    132e:	71 1d       	adc	r23, r1
    1330:	81 1d       	adc	r24, r1
    1332:	91 1d       	adc	r25, r1
    1334:	a1 1d       	adc	r26, r1
    1336:	20 d0       	rcall	.+64     	; 0x1378 <__ultoa_invert+0x84>
    1338:	09 f4       	brne	.+2      	; 0x133c <__ultoa_invert+0x48>
    133a:	68 94       	set
    133c:	3f 91       	pop	r19
    133e:	2a e0       	ldi	r18, 0x0A	; 10
    1340:	26 9f       	mul	r18, r22
    1342:	11 24       	eor	r1, r1
    1344:	30 19       	sub	r19, r0
    1346:	30 5d       	subi	r19, 0xD0	; 208
    1348:	31 93       	st	Z+, r19
    134a:	de f6       	brtc	.-74     	; 0x1302 <__ultoa_invert+0xe>
    134c:	cf 01       	movw	r24, r30
    134e:	08 95       	ret
    1350:	46 2f       	mov	r20, r22
    1352:	47 70       	andi	r20, 0x07	; 7
    1354:	40 5d       	subi	r20, 0xD0	; 208
    1356:	41 93       	st	Z+, r20
    1358:	b3 e0       	ldi	r27, 0x03	; 3
    135a:	0f d0       	rcall	.+30     	; 0x137a <__ultoa_invert+0x86>
    135c:	c9 f7       	brne	.-14     	; 0x1350 <__ultoa_invert+0x5c>
    135e:	f6 cf       	rjmp	.-20     	; 0x134c <__ultoa_invert+0x58>
    1360:	46 2f       	mov	r20, r22
    1362:	4f 70       	andi	r20, 0x0F	; 15
    1364:	40 5d       	subi	r20, 0xD0	; 208
    1366:	4a 33       	cpi	r20, 0x3A	; 58
    1368:	18 f0       	brcs	.+6      	; 0x1370 <__ultoa_invert+0x7c>
    136a:	49 5d       	subi	r20, 0xD9	; 217
    136c:	31 fd       	sbrc	r19, 1
    136e:	40 52       	subi	r20, 0x20	; 32
    1370:	41 93       	st	Z+, r20
    1372:	02 d0       	rcall	.+4      	; 0x1378 <__ultoa_invert+0x84>
    1374:	a9 f7       	brne	.-22     	; 0x1360 <__ultoa_invert+0x6c>
    1376:	ea cf       	rjmp	.-44     	; 0x134c <__ultoa_invert+0x58>
    1378:	b4 e0       	ldi	r27, 0x04	; 4
    137a:	a6 95       	lsr	r26
    137c:	97 95       	ror	r25
    137e:	87 95       	ror	r24
    1380:	77 95       	ror	r23
    1382:	67 95       	ror	r22
    1384:	ba 95       	dec	r27
    1386:	c9 f7       	brne	.-14     	; 0x137a <__ultoa_invert+0x86>
    1388:	00 97       	sbiw	r24, 0x00	; 0
    138a:	61 05       	cpc	r22, r1
    138c:	71 05       	cpc	r23, r1
    138e:	08 95       	ret
    1390:	9b 01       	movw	r18, r22
    1392:	ac 01       	movw	r20, r24
    1394:	0a 2e       	mov	r0, r26
    1396:	06 94       	lsr	r0
    1398:	57 95       	ror	r21
    139a:	47 95       	ror	r20
    139c:	37 95       	ror	r19
    139e:	27 95       	ror	r18
    13a0:	ba 95       	dec	r27
    13a2:	c9 f7       	brne	.-14     	; 0x1396 <__ultoa_invert+0xa2>
    13a4:	62 0f       	add	r22, r18
    13a6:	73 1f       	adc	r23, r19
    13a8:	84 1f       	adc	r24, r20
    13aa:	95 1f       	adc	r25, r21
    13ac:	a0 1d       	adc	r26, r0
    13ae:	08 95       	ret

000013b0 <__ctype_isfalse>:
    13b0:	99 27       	eor	r25, r25
    13b2:	88 27       	eor	r24, r24

000013b4 <__ctype_istrue>:
    13b4:	08 95       	ret

000013b6 <__prologue_saves__>:
    13b6:	2f 92       	push	r2
    13b8:	3f 92       	push	r3
    13ba:	4f 92       	push	r4
    13bc:	5f 92       	push	r5
    13be:	6f 92       	push	r6
    13c0:	7f 92       	push	r7
    13c2:	8f 92       	push	r8
    13c4:	9f 92       	push	r9
    13c6:	af 92       	push	r10
    13c8:	bf 92       	push	r11
    13ca:	cf 92       	push	r12
    13cc:	df 92       	push	r13
    13ce:	ef 92       	push	r14
    13d0:	ff 92       	push	r15
    13d2:	0f 93       	push	r16
    13d4:	1f 93       	push	r17
    13d6:	cf 93       	push	r28
    13d8:	df 93       	push	r29
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
    13de:	ca 1b       	sub	r28, r26
    13e0:	db 0b       	sbc	r29, r27
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	f8 94       	cli
    13e6:	de bf       	out	0x3e, r29	; 62
    13e8:	0f be       	out	0x3f, r0	; 63
    13ea:	cd bf       	out	0x3d, r28	; 61
    13ec:	09 94       	ijmp

000013ee <__epilogue_restores__>:
    13ee:	2a 88       	ldd	r2, Y+18	; 0x12
    13f0:	39 88       	ldd	r3, Y+17	; 0x11
    13f2:	48 88       	ldd	r4, Y+16	; 0x10
    13f4:	5f 84       	ldd	r5, Y+15	; 0x0f
    13f6:	6e 84       	ldd	r6, Y+14	; 0x0e
    13f8:	7d 84       	ldd	r7, Y+13	; 0x0d
    13fa:	8c 84       	ldd	r8, Y+12	; 0x0c
    13fc:	9b 84       	ldd	r9, Y+11	; 0x0b
    13fe:	aa 84       	ldd	r10, Y+10	; 0x0a
    1400:	b9 84       	ldd	r11, Y+9	; 0x09
    1402:	c8 84       	ldd	r12, Y+8	; 0x08
    1404:	df 80       	ldd	r13, Y+7	; 0x07
    1406:	ee 80       	ldd	r14, Y+6	; 0x06
    1408:	fd 80       	ldd	r15, Y+5	; 0x05
    140a:	0c 81       	ldd	r16, Y+4	; 0x04
    140c:	1b 81       	ldd	r17, Y+3	; 0x03
    140e:	aa 81       	ldd	r26, Y+2	; 0x02
    1410:	b9 81       	ldd	r27, Y+1	; 0x01
    1412:	ce 0f       	add	r28, r30
    1414:	d1 1d       	adc	r29, r1
    1416:	0f b6       	in	r0, 0x3f	; 63
    1418:	f8 94       	cli
    141a:	de bf       	out	0x3e, r29	; 62
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	cd bf       	out	0x3d, r28	; 61
    1420:	ed 01       	movw	r28, r26
    1422:	08 95       	ret

00001424 <_exit>:
    1424:	f8 94       	cli

00001426 <__stop_program>:
    1426:	ff cf       	rjmp	.-2      	; 0x1426 <__stop_program>
